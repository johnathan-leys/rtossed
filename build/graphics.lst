ARM GAS  /tmp/cczeTd9s.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"graphics.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "Core/Src/graphics.c"
  19              		.section	.text.graphics_init,"ax",%progbits
  20              		.align	1
  21              		.global	graphics_init
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	graphics_init:
  27              	.LVL0:
  28              	.LFB147:
   1:Core/Src/graphics.c **** /*
   2:Core/Src/graphics.c **** This is the core graphics library for all our displays, providing a common
   3:Core/Src/graphics.c **** set of graphics primitives (points, lines, circles, etc.).  It needs to be
   4:Core/Src/graphics.c **** paired with a hardware-specific library for each display device we carry
   5:Core/Src/graphics.c **** (to handle the lower-level functions).
   6:Core/Src/graphics.c **** 
   7:Core/Src/graphics.c **** Adafruit invests time and resources providing this open source code, please
   8:Core/Src/graphics.c **** support Adafruit & open-source hardware by purchasing products from Adafruit!
   9:Core/Src/graphics.c **** 
  10:Core/Src/graphics.c **** Copyright (c) 2013 Adafruit Industries.  All rights reserved.
  11:Core/Src/graphics.c **** 
  12:Core/Src/graphics.c **** Redistribution and use in source and binary forms, with or without
  13:Core/Src/graphics.c **** modification, are permitted provided that the following conditions are met:
  14:Core/Src/graphics.c **** 
  15:Core/Src/graphics.c **** - Redistributions of source code must retain the above copyright notice,
  16:Core/Src/graphics.c ****   this list of conditions and the following disclaimer.
  17:Core/Src/graphics.c **** - Redistributions in binary form must reproduce the above copyright notice,
  18:Core/Src/graphics.c ****   this list of conditions and the following disclaimer in the documentation
  19:Core/Src/graphics.c ****   and/or other materials provided with the distribution.
  20:Core/Src/graphics.c **** 
  21:Core/Src/graphics.c **** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Core/Src/graphics.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Core/Src/graphics.c **** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Core/Src/graphics.c **** ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  25:Core/Src/graphics.c **** LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Core/Src/graphics.c **** CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Core/Src/graphics.c **** SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Core/Src/graphics.c **** INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Core/Src/graphics.c **** CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Core/Src/graphics.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
ARM GAS  /tmp/cczeTd9s.s 			page 2


  31:Core/Src/graphics.c **** POSSIBILITY OF SUCH DAMAGE.
  32:Core/Src/graphics.c ****  */
  33:Core/Src/graphics.c **** #include <stdbool.h>
  34:Core/Src/graphics.c **** #include <string.h>
  35:Core/Src/graphics.c **** #include <stdlib.h>
  36:Core/Src/graphics.c **** #include <stdio.h>
  37:Core/Src/graphics.c **** #include "graphics.h"
  38:Core/Src/graphics.c **** #include "Adafruit_ST7735.h"
  39:Core/Src/graphics.c **** #include "stm32h7xx_hal.h"
  40:Core/Src/graphics.c **** 
  41:Core/Src/graphics.c **** 
  42:Core/Src/graphics.c **** static struct graphics gfx_prop = {
  43:Core/Src/graphics.c **** 	.width = 0,
  44:Core/Src/graphics.c **** 	.height = 0,
  45:Core/Src/graphics.c **** 	.rotation = 0,
  46:Core/Src/graphics.c **** 	.rotation = 0,
  47:Core/Src/graphics.c **** 	.cursor_x = 0,
  48:Core/Src/graphics.c **** 	.cursor_y = 0,
  49:Core/Src/graphics.c **** 	.textsize = 1,
  50:Core/Src/graphics.c **** 	.textcolor = 0,
  51:Core/Src/graphics.c **** 	.textbgcolor = 0,
  52:Core/Src/graphics.c **** 	.wrap = false,
  53:Core/Src/graphics.c **** 	.font = NULL,
  54:Core/Src/graphics.c **** 	.cp437 = 0,
  55:Core/Src/graphics.c **** };
  56:Core/Src/graphics.c **** 
  57:Core/Src/graphics.c **** void graphics_init(uint16_t w, uint16_t h)
  58:Core/Src/graphics.c **** {
  29              		.loc 1 58 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  59:Core/Src/graphics.c **** 	gfx_prop.width = w;
  34              		.loc 1 59 2 view .LVU1
  35              		.loc 1 59 17 is_stmt 0 view .LVU2
  36 0000 014B     		ldr	r3, .L2
  37 0002 1880     		strh	r0, [r3]	@ movhi
  60:Core/Src/graphics.c **** 	gfx_prop.height = h;
  38              		.loc 1 60 2 is_stmt 1 view .LVU3
  39              		.loc 1 60 18 is_stmt 0 view .LVU4
  40 0004 5980     		strh	r1, [r3, #2]	@ movhi
  61:Core/Src/graphics.c **** }
  41              		.loc 1 61 1 view .LVU5
  42 0006 7047     		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0008 00000000 		.word	gfx_prop
  47              		.cfi_endproc
  48              	.LFE147:
  50              		.section	.text.graphics_writeLine,"ax",%progbits
  51              		.align	1
  52              		.global	graphics_writeLine
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
ARM GAS  /tmp/cczeTd9s.s 			page 3


  57              	graphics_writeLine:
  58              	.LVL1:
  59              	.LFB149:
  62:Core/Src/graphics.c **** 
  63:Core/Src/graphics.c **** 
  64:Core/Src/graphics.c **** void graphics_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
  65:Core/Src/graphics.c **** {
  66:Core/Src/graphics.c **** 	// Update in subclasses if desired!
  67:Core/Src/graphics.c **** 	if (x0 == x1) {
  68:Core/Src/graphics.c **** 		if (y0 > y1)
  69:Core/Src/graphics.c **** 			_swap_int16_t(y0, y1);
  70:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(x0, y0, y1 - y0 + 1, color);
  71:Core/Src/graphics.c **** 	} else if (y0 == y1) {
  72:Core/Src/graphics.c **** 		if (x0 > x1)
  73:Core/Src/graphics.c **** 			_swap_int16_t(x0, x1);
  74:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastHLine(x0, y0, x1 - x0 + 1, color);
  75:Core/Src/graphics.c **** 	} else {
  76:Core/Src/graphics.c **** 		graphics_writeLine(x0, y0, x1, y1, color);
  77:Core/Src/graphics.c **** 	}
  78:Core/Src/graphics.c **** }
  79:Core/Src/graphics.c **** 
  80:Core/Src/graphics.c **** // Bresenham's algorithm - thx wikpedia
  81:Core/Src/graphics.c **** void graphics_writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
  82:Core/Src/graphics.c **** {
  60              		.loc 1 82 1 is_stmt 1 view -0
  61              		.cfi_startproc
  62              		@ args = 4, pretend = 0, frame = 8
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              		.loc 1 82 1 is_stmt 0 view .LVU7
  65 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 36
  68              		.cfi_offset 4, -36
  69              		.cfi_offset 5, -32
  70              		.cfi_offset 6, -28
  71              		.cfi_offset 7, -24
  72              		.cfi_offset 8, -20
  73              		.cfi_offset 9, -16
  74              		.cfi_offset 10, -12
  75              		.cfi_offset 11, -8
  76              		.cfi_offset 14, -4
  77 0004 83B0     		sub	sp, sp, #12
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 48
  80 0006 8B46     		mov	fp, r1
  81 0008 1646     		mov	r6, r2
  82 000a 1C46     		mov	r4, r3
  83 000c BDF83080 		ldrh	r8, [sp, #48]
  83:Core/Src/graphics.c **** 	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  84              		.loc 1 83 2 is_stmt 1 view .LVU8
  85              		.loc 1 83 25 is_stmt 0 view .LVU9
  86 0010 5A1A     		subs	r2, r3, r1
  87              	.LVL2:
  88              		.loc 1 83 18 view .LVU10
  89 0012 82EAE279 		eor	r9, r2, r2, asr #31
  90 0016 A9EBE279 		sub	r9, r9, r2, asr #31
  91              		.loc 1 83 40 view .LVU11
ARM GAS  /tmp/cczeTd9s.s 			page 4


  92 001a 311A     		subs	r1, r6, r0
  93              	.LVL3:
  94              		.loc 1 83 33 view .LVU12
  95 001c 81EAE17A 		eor	r10, r1, r1, asr #31
  96 0020 AAEBE17A 		sub	r10, r10, r1, asr #31
  97              	.LVL4:
  84:Core/Src/graphics.c **** 	if (steep) {
  98              		.loc 1 84 2 is_stmt 1 view .LVU13
  99              		.loc 1 84 5 is_stmt 0 view .LVU14
 100 0024 D145     		cmp	r9, r10
 101 0026 04DC     		bgt	.L5
 102 0028 3446     		mov	r4, r6
 103 002a 1E46     		mov	r6, r3
 104 002c 5B46     		mov	r3, fp
 105              	.LVL5:
 106              		.loc 1 84 5 view .LVU15
 107 002e 8346     		mov	fp, r0
 108 0030 1846     		mov	r0, r3
 109              	.LVL6:
 110              	.L5:
  85:Core/Src/graphics.c **** 		_swap_int16_t(x0, y0);
  86:Core/Src/graphics.c **** 		_swap_int16_t(x1, y1);
 111              		.loc 1 86 24 is_stmt 1 discriminator 1 view .LVU16
  87:Core/Src/graphics.c **** 	}
  88:Core/Src/graphics.c **** 
  89:Core/Src/graphics.c **** 	if (x0 > x1) {
 112              		.loc 1 89 2 discriminator 1 view .LVU17
 113              		.loc 1 89 5 is_stmt 0 discriminator 1 view .LVU18
 114 0032 A345     		cmp	fp, r4
 115 0034 05DC     		bgt	.L6
 116              		.loc 1 89 5 view .LVU19
 117 0036 3346     		mov	r3, r6
 118 0038 0646     		mov	r6, r0
 119              	.LVL7:
 120              		.loc 1 89 5 view .LVU20
 121 003a 1846     		mov	r0, r3
 122              	.LVL8:
 123              		.loc 1 89 5 view .LVU21
 124 003c 2346     		mov	r3, r4
 125 003e 5C46     		mov	r4, fp
 126              	.LVL9:
 127              		.loc 1 89 5 view .LVU22
 128 0040 9B46     		mov	fp, r3
 129              	.LVL10:
 130              	.L6:
  90:Core/Src/graphics.c **** 		_swap_int16_t(x0, x1);
  91:Core/Src/graphics.c **** 		_swap_int16_t(y0, y1);
 131              		.loc 1 91 24 is_stmt 1 discriminator 1 view .LVU23
  92:Core/Src/graphics.c **** 	}
  93:Core/Src/graphics.c **** 
  94:Core/Src/graphics.c **** 	int16_t dx, dy;
 132              		.loc 1 94 2 discriminator 1 view .LVU24
  95:Core/Src/graphics.c **** 	dx = x1 - x0;
 133              		.loc 1 95 2 discriminator 1 view .LVU25
 134              		.loc 1 95 10 is_stmt 0 discriminator 1 view .LVU26
 135 0042 ABEB0403 		sub	r3, fp, r4
 136 0046 9AB2     		uxth	r2, r3
ARM GAS  /tmp/cczeTd9s.s 			page 5


 137 0048 0092     		str	r2, [sp]
 138              		.loc 1 95 5 discriminator 1 view .LVU27
 139 004a 1BB2     		sxth	r3, r3
 140              	.LVL11:
  96:Core/Src/graphics.c **** 	dy = abs(y1 - y0);
 141              		.loc 1 96 2 is_stmt 1 discriminator 1 view .LVU28
 142              		.loc 1 96 14 is_stmt 0 discriminator 1 view .LVU29
 143 004c 871B     		subs	r7, r0, r6
 144              		.loc 1 96 7 discriminator 1 view .LVU30
 145 004e 002F     		cmp	r7, #0
 146 0050 B8BF     		it	lt
 147 0052 7F42     		rsblt	r7, r7, #0
 148              	.LVL12:
  97:Core/Src/graphics.c **** 
  98:Core/Src/graphics.c **** 	int16_t err = dx / 2;
 149              		.loc 1 98 2 is_stmt 1 discriminator 1 view .LVU31
 150              		.loc 1 98 10 is_stmt 0 discriminator 1 view .LVU32
 151 0054 1D46     		mov	r5, r3
 152 0056 002B     		cmp	r3, #0
 153 0058 06DB     		blt	.L16
 154              	.L7:
 155 005a 6D10     		asrs	r5, r5, #1
 156              	.LVL13:
  99:Core/Src/graphics.c **** 	int16_t ystep;
 157              		.loc 1 99 2 is_stmt 1 discriminator 1 view .LVU33
 100:Core/Src/graphics.c **** 
 101:Core/Src/graphics.c **** 	if (y0 < y1) {
 158              		.loc 1 101 2 discriminator 1 view .LVU34
 159              		.loc 1 101 5 is_stmt 0 discriminator 1 view .LVU35
 160 005c 8642     		cmp	r6, r0
 161 005e 22DB     		blt	.L8
 102:Core/Src/graphics.c **** 		ystep = 1;
 103:Core/Src/graphics.c **** 	} else {
 104:Core/Src/graphics.c **** 		ystep = -1;
 162              		.loc 1 104 9 view .LVU36
 163 0060 4FF0FF33 		mov	r3, #-1
 164              	.LVL14:
 165              		.loc 1 104 9 view .LVU37
 166 0064 0193     		str	r3, [sp, #4]
 167 0066 0DE0     		b	.L13
 168              	.LVL15:
 169              	.L16:
  98:Core/Src/graphics.c **** 	int16_t ystep;
 170              		.loc 1 98 10 discriminator 1 view .LVU38
 171 0068 5D1C     		adds	r5, r3, #1
 172 006a F6E7     		b	.L7
 173              	.LVL16:
 174              	.L10:
 105:Core/Src/graphics.c **** 	}
 106:Core/Src/graphics.c **** 
 107:Core/Src/graphics.c **** 	for (; x0 <= x1; x0++) {
 108:Core/Src/graphics.c **** 		if (steep) {
 109:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(y0, x0, color);
 110:Core/Src/graphics.c **** 		} else {
 111:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0, y0, color);
 175              		.loc 1 111 4 is_stmt 1 view .LVU39
 176 006c 4246     		mov	r2, r8
ARM GAS  /tmp/cczeTd9s.s 			page 6


 177 006e 3146     		mov	r1, r6
 178 0070 2046     		mov	r0, r4
 179 0072 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 180              	.LVL17:
 181              	.L11:
 112:Core/Src/graphics.c **** 		}
 113:Core/Src/graphics.c **** 		err -= dy;
 182              		.loc 1 113 3 view .LVU40
 183              		.loc 1 113 7 is_stmt 0 view .LVU41
 184 0076 ED1B     		subs	r5, r5, r7
 185              	.LVL18:
 186              		.loc 1 113 7 view .LVU42
 187 0078 ABB2     		uxth	r3, r5
 188 007a 2DB2     		sxth	r5, r5
 189              	.LVL19:
 114:Core/Src/graphics.c **** 		if (err < 0) {
 190              		.loc 1 114 3 is_stmt 1 view .LVU43
 191              		.loc 1 114 6 is_stmt 0 view .LVU44
 192 007c 002D     		cmp	r5, #0
 193 007e 0BDB     		blt	.L17
 194              	.L12:
 107:Core/Src/graphics.c **** 		if (steep) {
 195              		.loc 1 107 21 is_stmt 1 view .LVU45
 196 0080 0134     		adds	r4, r4, #1
 197              	.LVL20:
 107:Core/Src/graphics.c **** 		if (steep) {
 198              		.loc 1 107 21 is_stmt 0 view .LVU46
 199 0082 24B2     		sxth	r4, r4
 200              	.LVL21:
 201              	.L13:
 107:Core/Src/graphics.c **** 		if (steep) {
 202              		.loc 1 107 12 is_stmt 1 discriminator 1 view .LVU47
 203 0084 5C45     		cmp	r4, fp
 204 0086 11DC     		bgt	.L18
 108:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(y0, x0, color);
 205              		.loc 1 108 3 view .LVU48
 108:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(y0, x0, color);
 206              		.loc 1 108 6 is_stmt 0 view .LVU49
 207 0088 D145     		cmp	r9, r10
 208 008a EFDD     		ble	.L10
 109:Core/Src/graphics.c **** 		} else {
 209              		.loc 1 109 4 is_stmt 1 view .LVU50
 210 008c 4246     		mov	r2, r8
 211 008e 2146     		mov	r1, r4
 212 0090 3046     		mov	r0, r6
 213 0092 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 214              	.LVL22:
 215 0096 EEE7     		b	.L11
 216              	.L17:
 115:Core/Src/graphics.c **** 			y0 += ystep;
 217              		.loc 1 115 4 view .LVU51
 218              		.loc 1 115 7 is_stmt 0 view .LVU52
 219 0098 019A     		ldr	r2, [sp, #4]
 220 009a 1644     		add	r6, r6, r2
 221              	.LVL23:
 222              		.loc 1 115 7 view .LVU53
 223 009c 36B2     		sxth	r6, r6
ARM GAS  /tmp/cczeTd9s.s 			page 7


 224              	.LVL24:
 116:Core/Src/graphics.c **** 			err += dx;
 225              		.loc 1 116 4 is_stmt 1 view .LVU54
 226              		.loc 1 116 8 is_stmt 0 view .LVU55
 227 009e 009A     		ldr	r2, [sp]
 228 00a0 1344     		add	r3, r3, r2
 229 00a2 1DB2     		sxth	r5, r3
 230              	.LVL25:
 231              		.loc 1 116 8 view .LVU56
 232 00a4 ECE7     		b	.L12
 233              	.LVL26:
 234              	.L8:
 102:Core/Src/graphics.c **** 	} else {
 235              		.loc 1 102 9 view .LVU57
 236 00a6 0123     		movs	r3, #1
 237              	.LVL27:
 102:Core/Src/graphics.c **** 	} else {
 238              		.loc 1 102 9 view .LVU58
 239 00a8 0193     		str	r3, [sp, #4]
 240 00aa EBE7     		b	.L13
 241              	.LVL28:
 242              	.L18:
 117:Core/Src/graphics.c **** 		}
 118:Core/Src/graphics.c **** 	}
 119:Core/Src/graphics.c **** }
 243              		.loc 1 119 1 view .LVU59
 244 00ac 03B0     		add	sp, sp, #12
 245              	.LCFI2:
 246              		.cfi_def_cfa_offset 36
 247              	.LVL29:
 248              		.loc 1 119 1 view .LVU60
 249              		@ sp needed
 250 00ae BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 251              		.loc 1 119 1 view .LVU61
 252              		.cfi_endproc
 253              	.LFE149:
 255              		.section	.text.graphics_drawLine,"ax",%progbits
 256              		.align	1
 257              		.global	graphics_drawLine
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 262              	graphics_drawLine:
 263              	.LVL30:
 264              	.LFB148:
  65:Core/Src/graphics.c **** 	// Update in subclasses if desired!
 265              		.loc 1 65 1 is_stmt 1 view -0
 266              		.cfi_startproc
 267              		@ args = 4, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
  65:Core/Src/graphics.c **** 	// Update in subclasses if desired!
 269              		.loc 1 65 1 is_stmt 0 view .LVU63
 270 0000 00B5     		push	{lr}
 271              	.LCFI3:
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 14, -4
 274 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cczeTd9s.s 			page 8


 275              	.LCFI4:
 276              		.cfi_def_cfa_offset 16
 277 0004 9E46     		mov	lr, r3
 278 0006 BDF81030 		ldrh	r3, [sp, #16]
 279              	.LVL31:
  67:Core/Src/graphics.c **** 		if (y0 > y1)
 280              		.loc 1 67 2 is_stmt 1 view .LVU64
  67:Core/Src/graphics.c **** 		if (y0 > y1)
 281              		.loc 1 67 5 is_stmt 0 view .LVU65
 282 000a 9042     		cmp	r0, r2
 283 000c 0FD0     		beq	.L26
 284 000e 9446     		mov	ip, r2
  71:Core/Src/graphics.c **** 		if (x0 > x1)
 285              		.loc 1 71 9 is_stmt 1 view .LVU66
  71:Core/Src/graphics.c **** 		if (x0 > x1)
 286              		.loc 1 71 12 is_stmt 0 view .LVU67
 287 0010 7145     		cmp	r1, lr
 288 0012 1CD1     		bne	.L23
  72:Core/Src/graphics.c **** 			_swap_int16_t(x0, x1);
 289              		.loc 1 72 3 is_stmt 1 view .LVU68
  72:Core/Src/graphics.c **** 			_swap_int16_t(x0, x1);
 290              		.loc 1 72 6 is_stmt 0 view .LVU69
 291 0014 9042     		cmp	r0, r2
 292 0016 01DC     		bgt	.L24
 293 0018 8446     		mov	ip, r0
 294 001a 1046     		mov	r0, r2
 295              	.LVL32:
 296              	.L24:
  73:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastHLine(x0, y0, x1 - x0 + 1, color);
 297              		.loc 1 73 25 is_stmt 1 discriminator 1 view .LVU70
  74:Core/Src/graphics.c **** 	} else {
 298              		.loc 1 74 3 discriminator 1 view .LVU71
  74:Core/Src/graphics.c **** 	} else {
 299              		.loc 1 74 44 is_stmt 0 discriminator 1 view .LVU72
 300 001c A0EB0C02 		sub	r2, r0, ip
 301 0020 92B2     		uxth	r2, r2
  74:Core/Src/graphics.c **** 	} else {
 302              		.loc 1 74 49 discriminator 1 view .LVU73
 303 0022 0132     		adds	r2, r2, #1
  74:Core/Src/graphics.c **** 	} else {
 304              		.loc 1 74 3 discriminator 1 view .LVU74
 305 0024 12B2     		sxth	r2, r2
 306 0026 6046     		mov	r0, ip
 307              	.LVL33:
  74:Core/Src/graphics.c **** 	} else {
 308              		.loc 1 74 3 discriminator 1 view .LVU75
 309 0028 FFF7FEFF 		bl	Adafruit_ST7735_drawFastHLine
 310              	.LVL34:
  74:Core/Src/graphics.c **** 	} else {
 311              		.loc 1 74 3 discriminator 1 view .LVU76
 312 002c 0CE0     		b	.L19
 313              	.LVL35:
 314              	.L26:
  68:Core/Src/graphics.c **** 			_swap_int16_t(y0, y1);
 315              		.loc 1 68 3 is_stmt 1 view .LVU77
  68:Core/Src/graphics.c **** 			_swap_int16_t(y0, y1);
 316              		.loc 1 68 6 is_stmt 0 view .LVU78
ARM GAS  /tmp/cczeTd9s.s 			page 9


 317 002e 7145     		cmp	r1, lr
 318 0030 02DC     		bgt	.L21
 319 0032 7246     		mov	r2, lr
 320              	.LVL36:
  68:Core/Src/graphics.c **** 			_swap_int16_t(y0, y1);
 321              		.loc 1 68 6 view .LVU79
 322 0034 8E46     		mov	lr, r1
 323 0036 1146     		mov	r1, r2
 324              	.LVL37:
 325              	.L21:
  69:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(x0, y0, y1 - y0 + 1, color);
 326              		.loc 1 69 25 is_stmt 1 discriminator 1 view .LVU80
  70:Core/Src/graphics.c **** 	} else if (y0 == y1) {
 327              		.loc 1 70 3 discriminator 1 view .LVU81
  70:Core/Src/graphics.c **** 	} else if (y0 == y1) {
 328              		.loc 1 70 44 is_stmt 0 discriminator 1 view .LVU82
 329 0038 A1EB0E02 		sub	r2, r1, lr
 330 003c 92B2     		uxth	r2, r2
  70:Core/Src/graphics.c **** 	} else if (y0 == y1) {
 331              		.loc 1 70 49 discriminator 1 view .LVU83
 332 003e 0132     		adds	r2, r2, #1
  70:Core/Src/graphics.c **** 	} else if (y0 == y1) {
 333              		.loc 1 70 3 discriminator 1 view .LVU84
 334 0040 12B2     		sxth	r2, r2
 335 0042 7146     		mov	r1, lr
 336              	.LVL38:
  70:Core/Src/graphics.c **** 	} else if (y0 == y1) {
 337              		.loc 1 70 3 discriminator 1 view .LVU85
 338 0044 FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 339              	.LVL39:
 340              	.L19:
  78:Core/Src/graphics.c **** 
 341              		.loc 1 78 1 view .LVU86
 342 0048 03B0     		add	sp, sp, #12
 343              	.LCFI5:
 344              		.cfi_remember_state
 345              		.cfi_def_cfa_offset 4
 346              		@ sp needed
 347 004a 5DF804FB 		ldr	pc, [sp], #4
 348              	.LVL40:
 349              	.L23:
 350              	.LCFI6:
 351              		.cfi_restore_state
  76:Core/Src/graphics.c **** 	}
 352              		.loc 1 76 3 is_stmt 1 view .LVU87
 353 004e 0093     		str	r3, [sp]
 354 0050 7346     		mov	r3, lr
 355 0052 FFF7FEFF 		bl	graphics_writeLine
 356              	.LVL41:
  78:Core/Src/graphics.c **** 
 357              		.loc 1 78 1 is_stmt 0 view .LVU88
 358 0056 F7E7     		b	.L19
 359              		.cfi_endproc
 360              	.LFE148:
 362              		.section	.text.graphics_drawCircle,"ax",%progbits
 363              		.align	1
 364              		.global	graphics_drawCircle
ARM GAS  /tmp/cczeTd9s.s 			page 10


 365              		.syntax unified
 366              		.thumb
 367              		.thumb_func
 369              	graphics_drawCircle:
 370              	.LVL42:
 371              	.LFB150:
 120:Core/Src/graphics.c **** 
 121:Core/Src/graphics.c **** // Draw a circle outline
 122:Core/Src/graphics.c **** void graphics_drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
 123:Core/Src/graphics.c **** {
 372              		.loc 1 123 1 is_stmt 1 view -0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 24
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              		.loc 1 123 1 is_stmt 0 view .LVU90
 377 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 378              	.LCFI7:
 379              		.cfi_def_cfa_offset 36
 380              		.cfi_offset 4, -36
 381              		.cfi_offset 5, -32
 382              		.cfi_offset 6, -28
 383              		.cfi_offset 7, -24
 384              		.cfi_offset 8, -20
 385              		.cfi_offset 9, -16
 386              		.cfi_offset 10, -12
 387              		.cfi_offset 11, -8
 388              		.cfi_offset 14, -4
 389 0004 87B0     		sub	sp, sp, #28
 390              	.LCFI8:
 391              		.cfi_def_cfa_offset 64
 392 0006 8246     		mov	r10, r0
 393 0008 0D46     		mov	r5, r1
 394 000a 0192     		str	r2, [sp, #4]
 395 000c 1E46     		mov	r6, r3
 124:Core/Src/graphics.c **** 	int16_t f = 1 - r;
 396              		.loc 1 124 2 is_stmt 1 view .LVU91
 397              		.loc 1 124 16 is_stmt 0 view .LVU92
 398 000e 94B2     		uxth	r4, r2
 399 0010 C4F10103 		rsb	r3, r4, #1
 400              	.LVL43:
 401              		.loc 1 124 10 view .LVU93
 402 0014 0FFA83F9 		sxth	r9, r3
 403              	.LVL44:
 125:Core/Src/graphics.c **** 	int16_t ddF_x = 1;
 404              		.loc 1 125 2 is_stmt 1 view .LVU94
 126:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 405              		.loc 1 126 2 view .LVU95
 406              		.loc 1 126 21 is_stmt 0 view .LVU96
 407 0018 C4EBC433 		rsb	r3, r4, r4, lsl #15
 408 001c 5B00     		lsls	r3, r3, #1
 409              		.loc 1 126 10 view .LVU97
 410 001e 1BB2     		sxth	r3, r3
 411 0020 0593     		str	r3, [sp, #20]
 412              	.LVL45:
 127:Core/Src/graphics.c **** 	int16_t x = 0;
 413              		.loc 1 127 2 is_stmt 1 view .LVU98
 128:Core/Src/graphics.c **** 	int16_t y = r;
ARM GAS  /tmp/cczeTd9s.s 			page 11


 414              		.loc 1 128 2 view .LVU99
 129:Core/Src/graphics.c **** 
 130:Core/Src/graphics.c **** 	Adafruit_ST7735_drawPixel(x0, y0 + r, color);
 415              		.loc 1 130 2 view .LVU100
 416              		.loc 1 130 35 is_stmt 0 view .LVU101
 417 0022 1FFA81FB 		uxth	fp, r1
 418 0026 04EB0B01 		add	r1, r4, fp
 419              	.LVL46:
 420              		.loc 1 130 2 view .LVU102
 421 002a 3246     		mov	r2, r6
 422              	.LVL47:
 423              		.loc 1 130 2 view .LVU103
 424 002c 09B2     		sxth	r1, r1
 425 002e FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 426              	.LVL48:
 131:Core/Src/graphics.c **** 	Adafruit_ST7735_drawPixel(x0, y0 - r, color);
 427              		.loc 1 131 2 is_stmt 1 view .LVU104
 428              		.loc 1 131 35 is_stmt 0 view .LVU105
 429 0032 ABEB0401 		sub	r1, fp, r4
 430              		.loc 1 131 2 view .LVU106
 431 0036 3246     		mov	r2, r6
 432 0038 09B2     		sxth	r1, r1
 433 003a 5046     		mov	r0, r10
 434 003c FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 435              	.LVL49:
 132:Core/Src/graphics.c **** 	Adafruit_ST7735_drawPixel(x0 + r, y0, color);
 436              		.loc 1 132 2 is_stmt 1 view .LVU107
 437              		.loc 1 132 31 is_stmt 0 view .LVU108
 438 0040 1FFA8AFA 		uxth	r10, r10
 439 0044 04EB0A00 		add	r0, r4, r10
 440              		.loc 1 132 2 view .LVU109
 441 0048 3246     		mov	r2, r6
 442 004a 2946     		mov	r1, r5
 443 004c 00B2     		sxth	r0, r0
 444 004e FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 445              	.LVL50:
 133:Core/Src/graphics.c **** 	Adafruit_ST7735_drawPixel(x0 - r, y0, color);
 446              		.loc 1 133 2 is_stmt 1 view .LVU110
 447              		.loc 1 133 31 is_stmt 0 view .LVU111
 448 0052 AAEB0400 		sub	r0, r10, r4
 449              		.loc 1 133 2 view .LVU112
 450 0056 3246     		mov	r2, r6
 451 0058 2946     		mov	r1, r5
 452 005a 00B2     		sxth	r0, r0
 453 005c FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 454              	.LVL51:
 134:Core/Src/graphics.c **** 
 135:Core/Src/graphics.c **** 	while (x < y) {
 455              		.loc 1 135 2 is_stmt 1 view .LVU113
 127:Core/Src/graphics.c **** 	int16_t y = r;
 456              		.loc 1 127 10 is_stmt 0 view .LVU114
 457 0060 0023     		movs	r3, #0
 458 0062 0293     		str	r3, [sp, #8]
 125:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 459              		.loc 1 125 10 view .LVU115
 460 0064 0123     		movs	r3, #1
 461 0066 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/cczeTd9s.s 			page 12


 462              		.loc 1 135 8 view .LVU116
 463 0068 5EE0     		b	.L28
 464              	.LVL52:
 465              	.L33:
 136:Core/Src/graphics.c **** 		if (f >= 0) {
 137:Core/Src/graphics.c **** 			y--;
 466              		.loc 1 137 4 is_stmt 1 view .LVU117
 467              		.loc 1 137 5 is_stmt 0 view .LVU118
 468 006a 019B     		ldr	r3, [sp, #4]
 469 006c 013B     		subs	r3, r3, #1
 470 006e 1BB2     		sxth	r3, r3
 471 0070 0193     		str	r3, [sp, #4]
 472              	.LVL53:
 138:Core/Src/graphics.c **** 			ddF_y += 2;
 473              		.loc 1 138 4 is_stmt 1 view .LVU119
 474              		.loc 1 138 10 is_stmt 0 view .LVU120
 475 0072 059B     		ldr	r3, [sp, #20]
 476 0074 0233     		adds	r3, r3, #2
 477 0076 1AB2     		sxth	r2, r3
 478 0078 0592     		str	r2, [sp, #20]
 479              	.LVL54:
 139:Core/Src/graphics.c **** 			f += ddF_y;
 480              		.loc 1 139 4 is_stmt 1 view .LVU121
 481              		.loc 1 139 6 is_stmt 0 view .LVU122
 482 007a 19FA83F3 		uxtah	r3, r9, r3
 483 007e 0FFA83F9 		sxth	r9, r3
 484              	.LVL55:
 485              	.L29:
 140:Core/Src/graphics.c **** 		}
 141:Core/Src/graphics.c **** 		x++;
 486              		.loc 1 141 3 is_stmt 1 view .LVU123
 487              		.loc 1 141 4 is_stmt 0 view .LVU124
 488 0082 029B     		ldr	r3, [sp, #8]
 489 0084 0133     		adds	r3, r3, #1
 490 0086 9DB2     		uxth	r5, r3
 491 0088 1BB2     		sxth	r3, r3
 492 008a 0293     		str	r3, [sp, #8]
 493              	.LVL56:
 142:Core/Src/graphics.c **** 		ddF_x += 2;
 494              		.loc 1 142 3 is_stmt 1 view .LVU125
 495              		.loc 1 142 9 is_stmt 0 view .LVU126
 496 008c 039B     		ldr	r3, [sp, #12]
 497 008e 0233     		adds	r3, r3, #2
 498 0090 1AB2     		sxth	r2, r3
 499 0092 0392     		str	r2, [sp, #12]
 500              	.LVL57:
 143:Core/Src/graphics.c **** 		f += ddF_x;
 501              		.loc 1 143 3 is_stmt 1 view .LVU127
 502              		.loc 1 143 5 is_stmt 0 view .LVU128
 503 0094 19FA83F3 		uxtah	r3, r9, r3
 504 0098 0FFA83F9 		sxth	r9, r3
 505              	.LVL58:
 144:Core/Src/graphics.c **** 
 145:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 + x, y0 + y, color);
 506              		.loc 1 145 3 is_stmt 1 view .LVU129
 507              		.loc 1 145 32 is_stmt 0 view .LVU130
 508 009c 0AEB0503 		add	r3, r10, r5
ARM GAS  /tmp/cczeTd9s.s 			page 13


 509              		.loc 1 145 3 view .LVU131
 510 00a0 1BB2     		sxth	r3, r3
 511              		.loc 1 145 40 view .LVU132
 512 00a2 BDF80440 		ldrh	r4, [sp, #4]
 513 00a6 0BEB0408 		add	r8, fp, r4
 514              		.loc 1 145 3 view .LVU133
 515 00aa 0FFA88F8 		sxth	r8, r8
 516 00ae 3246     		mov	r2, r6
 517 00b0 4146     		mov	r1, r8
 518 00b2 0493     		str	r3, [sp, #16]
 519 00b4 1846     		mov	r0, r3
 520 00b6 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 521              	.LVL59:
 146:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 522              		.loc 1 146 3 is_stmt 1 view .LVU134
 523              		.loc 1 146 32 is_stmt 0 view .LVU135
 524 00ba AAEB0507 		sub	r7, r10, r5
 525              		.loc 1 146 3 view .LVU136
 526 00be 3FB2     		sxth	r7, r7
 527 00c0 3246     		mov	r2, r6
 528 00c2 4146     		mov	r1, r8
 529 00c4 3846     		mov	r0, r7
 530 00c6 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 531              	.LVL60:
 147:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 + x, y0 - y, color);
 532              		.loc 1 147 3 is_stmt 1 view .LVU137
 533              		.loc 1 147 40 is_stmt 0 view .LVU138
 534 00ca ABEB0408 		sub	r8, fp, r4
 535              		.loc 1 147 3 view .LVU139
 536 00ce 0FFA88F8 		sxth	r8, r8
 537 00d2 3246     		mov	r2, r6
 538 00d4 4146     		mov	r1, r8
 539 00d6 0498     		ldr	r0, [sp, #16]
 540 00d8 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 541              	.LVL61:
 148:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 - x, y0 - y, color);
 542              		.loc 1 148 3 is_stmt 1 view .LVU140
 543 00dc 3246     		mov	r2, r6
 544 00de 4146     		mov	r1, r8
 545 00e0 3846     		mov	r0, r7
 546 00e2 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 547              	.LVL62:
 149:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 548              		.loc 1 149 3 view .LVU141
 549              		.loc 1 149 32 is_stmt 0 view .LVU142
 550 00e6 0AEB0407 		add	r7, r10, r4
 551              		.loc 1 149 3 view .LVU143
 552 00ea 3FB2     		sxth	r7, r7
 553              		.loc 1 149 40 view .LVU144
 554 00ec 0BEB0508 		add	r8, fp, r5
 555              		.loc 1 149 3 view .LVU145
 556 00f0 0FFA88F8 		sxth	r8, r8
 557 00f4 3246     		mov	r2, r6
 558 00f6 4146     		mov	r1, r8
 559 00f8 3846     		mov	r0, r7
 560 00fa FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 561              	.LVL63:
ARM GAS  /tmp/cczeTd9s.s 			page 14


 150:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 - y, y0 + x, color);
 562              		.loc 1 150 3 is_stmt 1 view .LVU146
 563              		.loc 1 150 32 is_stmt 0 view .LVU147
 564 00fe AAEB0404 		sub	r4, r10, r4
 565              		.loc 1 150 3 view .LVU148
 566 0102 24B2     		sxth	r4, r4
 567 0104 3246     		mov	r2, r6
 568 0106 4146     		mov	r1, r8
 569 0108 2046     		mov	r0, r4
 570 010a FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 571              	.LVL64:
 151:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 572              		.loc 1 151 3 is_stmt 1 view .LVU149
 573              		.loc 1 151 40 is_stmt 0 view .LVU150
 574 010e ABEB0505 		sub	r5, fp, r5
 575              		.loc 1 151 3 view .LVU151
 576 0112 2DB2     		sxth	r5, r5
 577 0114 3246     		mov	r2, r6
 578 0116 2946     		mov	r1, r5
 579 0118 3846     		mov	r0, r7
 580 011a FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 581              	.LVL65:
 152:Core/Src/graphics.c **** 		Adafruit_ST7735_drawPixel(x0 - y, y0 - x, color);
 582              		.loc 1 152 3 is_stmt 1 view .LVU152
 583 011e 3246     		mov	r2, r6
 584 0120 2946     		mov	r1, r5
 585 0122 2046     		mov	r0, r4
 586 0124 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 587              	.LVL66:
 588              	.L28:
 135:Core/Src/graphics.c **** 		if (f >= 0) {
 589              		.loc 1 135 11 view .LVU153
 590 0128 029B     		ldr	r3, [sp, #8]
 591 012a 019A     		ldr	r2, [sp, #4]
 592 012c 9342     		cmp	r3, r2
 593 012e 03DA     		bge	.L32
 136:Core/Src/graphics.c **** 			y--;
 594              		.loc 1 136 3 view .LVU154
 136:Core/Src/graphics.c **** 			y--;
 595              		.loc 1 136 6 is_stmt 0 view .LVU155
 596 0130 B9F1000F 		cmp	r9, #0
 597 0134 99DA     		bge	.L33
 598 0136 A4E7     		b	.L29
 599              	.L32:
 153:Core/Src/graphics.c **** 	}
 154:Core/Src/graphics.c **** }
 600              		.loc 1 154 1 view .LVU156
 601 0138 07B0     		add	sp, sp, #28
 602              	.LCFI9:
 603              		.cfi_def_cfa_offset 36
 604              		@ sp needed
 605 013a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 606              		.loc 1 154 1 view .LVU157
 607              		.cfi_endproc
 608              	.LFE150:
 610              		.section	.text.grahics_drawCircleHelper,"ax",%progbits
 611              		.align	1
ARM GAS  /tmp/cczeTd9s.s 			page 15


 612              		.global	grahics_drawCircleHelper
 613              		.syntax unified
 614              		.thumb
 615              		.thumb_func
 617              	grahics_drawCircleHelper:
 618              	.LVL67:
 619              	.LFB151:
 155:Core/Src/graphics.c **** 
 156:Core/Src/graphics.c **** void grahics_drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color
 157:Core/Src/graphics.c **** {
 620              		.loc 1 157 1 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 4, pretend = 0, frame = 24
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624              		.loc 1 157 1 is_stmt 0 view .LVU159
 625 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 626              	.LCFI10:
 627              		.cfi_def_cfa_offset 36
 628              		.cfi_offset 4, -36
 629              		.cfi_offset 5, -32
 630              		.cfi_offset 6, -28
 631              		.cfi_offset 7, -24
 632              		.cfi_offset 8, -20
 633              		.cfi_offset 9, -16
 634              		.cfi_offset 10, -12
 635              		.cfi_offset 11, -8
 636              		.cfi_offset 14, -4
 637 0004 87B0     		sub	sp, sp, #28
 638              	.LCFI11:
 639              		.cfi_def_cfa_offset 64
 640 0006 0390     		str	r0, [sp, #12]
 641 0008 0491     		str	r1, [sp, #16]
 642 000a 9046     		mov	r8, r2
 643 000c 1E46     		mov	r6, r3
 644 000e BDF84030 		ldrh	r3, [sp, #64]
 645              	.LVL68:
 646              		.loc 1 157 1 view .LVU160
 647 0012 0193     		str	r3, [sp, #4]
 158:Core/Src/graphics.c **** 	int16_t f = 1 - r;
 648              		.loc 1 158 2 is_stmt 1 view .LVU161
 649              		.loc 1 158 16 is_stmt 0 view .LVU162
 650 0014 93B2     		uxth	r3, r2
 651 0016 C3F10104 		rsb	r4, r3, #1
 652              		.loc 1 158 10 view .LVU163
 653 001a 24B2     		sxth	r4, r4
 654              	.LVL69:
 159:Core/Src/graphics.c **** 	int16_t ddF_x = 1;
 655              		.loc 1 159 2 is_stmt 1 view .LVU164
 160:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 656              		.loc 1 160 2 view .LVU165
 657              		.loc 1 160 21 is_stmt 0 view .LVU166
 658 001c C3EBC333 		rsb	r3, r3, r3, lsl #15
 659 0020 5B00     		lsls	r3, r3, #1
 660              		.loc 1 160 10 view .LVU167
 661 0022 1BB2     		sxth	r3, r3
 662 0024 0593     		str	r3, [sp, #20]
 663              	.LVL70:
ARM GAS  /tmp/cczeTd9s.s 			page 16


 161:Core/Src/graphics.c **** 	int16_t x = 0;
 664              		.loc 1 161 2 is_stmt 1 view .LVU168
 162:Core/Src/graphics.c **** 	int16_t y = r;
 665              		.loc 1 162 2 view .LVU169
 163:Core/Src/graphics.c **** 
 164:Core/Src/graphics.c **** 	while (x < y) {
 666              		.loc 1 164 2 view .LVU170
 161:Core/Src/graphics.c **** 	int16_t y = r;
 667              		.loc 1 161 10 is_stmt 0 view .LVU171
 668 0026 0025     		movs	r5, #0
 159:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 669              		.loc 1 159 10 view .LVU172
 670 0028 0123     		movs	r3, #1
 671 002a 0293     		str	r3, [sp, #8]
 672              		.loc 1 164 8 view .LVU173
 673 002c 20E0     		b	.L35
 674              	.LVL71:
 675              	.L48:
 165:Core/Src/graphics.c **** 		if (f >= 0) {
 166:Core/Src/graphics.c **** 			y--;
 676              		.loc 1 166 4 is_stmt 1 view .LVU174
 677              		.loc 1 166 5 is_stmt 0 view .LVU175
 678 002e 08F1FF38 		add	r8, r8, #-1
 679              	.LVL72:
 680              		.loc 1 166 5 view .LVU176
 681 0032 0FFA88F8 		sxth	r8, r8
 682              	.LVL73:
 167:Core/Src/graphics.c **** 			ddF_y += 2;
 683              		.loc 1 167 4 is_stmt 1 view .LVU177
 684              		.loc 1 167 10 is_stmt 0 view .LVU178
 685 0036 059B     		ldr	r3, [sp, #20]
 686 0038 0233     		adds	r3, r3, #2
 687 003a 1AB2     		sxth	r2, r3
 688 003c 0592     		str	r2, [sp, #20]
 689              	.LVL74:
 168:Core/Src/graphics.c **** 			f += ddF_y;
 690              		.loc 1 168 4 is_stmt 1 view .LVU179
 691              		.loc 1 168 6 is_stmt 0 view .LVU180
 692 003e 14FA83F3 		uxtah	r3, r4, r3
 693 0042 1CB2     		sxth	r4, r3
 694              	.LVL75:
 695              	.L36:
 169:Core/Src/graphics.c **** 		}
 170:Core/Src/graphics.c **** 		x++;
 696              		.loc 1 170 3 is_stmt 1 view .LVU181
 697              		.loc 1 170 4 is_stmt 0 view .LVU182
 698 0044 0135     		adds	r5, r5, #1
 699              	.LVL76:
 700              		.loc 1 170 4 view .LVU183
 701 0046 AFB2     		uxth	r7, r5
 702 0048 2DB2     		sxth	r5, r5
 703              	.LVL77:
 171:Core/Src/graphics.c **** 		ddF_x += 2;
 704              		.loc 1 171 3 is_stmt 1 view .LVU184
 705              		.loc 1 171 9 is_stmt 0 view .LVU185
 706 004a 029B     		ldr	r3, [sp, #8]
 707 004c 0233     		adds	r3, r3, #2
ARM GAS  /tmp/cczeTd9s.s 			page 17


 708 004e 1AB2     		sxth	r2, r3
 709 0050 0292     		str	r2, [sp, #8]
 710              	.LVL78:
 172:Core/Src/graphics.c **** 		f += ddF_x;
 711              		.loc 1 172 3 is_stmt 1 view .LVU186
 712              		.loc 1 172 5 is_stmt 0 view .LVU187
 713 0052 14FA83F3 		uxtah	r3, r4, r3
 714 0056 1CB2     		sxth	r4, r3
 715              	.LVL79:
 173:Core/Src/graphics.c **** 		if (cornername & 0x4) {
 716              		.loc 1 173 3 is_stmt 1 view .LVU188
 717              		.loc 1 173 6 is_stmt 0 view .LVU189
 718 0058 16F0040F 		tst	r6, #4
 719 005c 0DD1     		bne	.L43
 720              	.L37:
 174:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + x, y0 + y, color);
 175:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 176:Core/Src/graphics.c **** 		}
 177:Core/Src/graphics.c **** 		if (cornername & 0x2) {
 721              		.loc 1 177 3 is_stmt 1 view .LVU190
 722              		.loc 1 177 6 is_stmt 0 view .LVU191
 723 005e 16F0020F 		tst	r6, #2
 724 0062 23D1     		bne	.L44
 725              	.L38:
 178:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + x, y0 - y, color);
 179:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 180:Core/Src/graphics.c **** 		}
 181:Core/Src/graphics.c **** 		if (cornername & 0x8) {
 726              		.loc 1 181 3 is_stmt 1 view .LVU192
 727              		.loc 1 181 6 is_stmt 0 view .LVU193
 728 0064 16F0080F 		tst	r6, #8
 729 0068 39D1     		bne	.L45
 730              	.L39:
 182:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - y, y0 + x, color);
 183:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 184:Core/Src/graphics.c **** 		}
 185:Core/Src/graphics.c **** 		if (cornername & 0x1) {
 731              		.loc 1 185 3 is_stmt 1 view .LVU194
 732              		.loc 1 185 6 is_stmt 0 view .LVU195
 733 006a 16F0010F 		tst	r6, #1
 734 006e 4FD1     		bne	.L46
 735              	.LVL80:
 736              	.L35:
 164:Core/Src/graphics.c **** 		if (f >= 0) {
 737              		.loc 1 164 11 is_stmt 1 view .LVU196
 738 0070 4545     		cmp	r5, r8
 739 0072 66DA     		bge	.L47
 165:Core/Src/graphics.c **** 			y--;
 740              		.loc 1 165 3 view .LVU197
 165:Core/Src/graphics.c **** 			y--;
 741              		.loc 1 165 6 is_stmt 0 view .LVU198
 742 0074 002C     		cmp	r4, #0
 743 0076 DADA     		bge	.L48
 744 0078 E4E7     		b	.L36
 745              	.L43:
 174:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 746              		.loc 1 174 4 is_stmt 1 view .LVU199
ARM GAS  /tmp/cczeTd9s.s 			page 18


 174:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 747              		.loc 1 174 33 is_stmt 0 view .LVU200
 748 007a BDF80CA0 		ldrh	r10, [sp, #12]
 749 007e 07EB0A00 		add	r0, r7, r10
 174:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 750              		.loc 1 174 41 view .LVU201
 751 0082 BDF81090 		ldrh	r9, [sp, #16]
 752 0086 1FFA88FB 		uxth	fp, r8
 753 008a 09EB0B01 		add	r1, r9, fp
 174:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 + x, color);
 754              		.loc 1 174 4 view .LVU202
 755 008e 019A     		ldr	r2, [sp, #4]
 756 0090 09B2     		sxth	r1, r1
 757 0092 00B2     		sxth	r0, r0
 758 0094 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 759              	.LVL81:
 175:Core/Src/graphics.c **** 		}
 760              		.loc 1 175 4 is_stmt 1 view .LVU203
 175:Core/Src/graphics.c **** 		}
 761              		.loc 1 175 33 is_stmt 0 view .LVU204
 762 0098 0AEB0B00 		add	r0, r10, fp
 175:Core/Src/graphics.c **** 		}
 763              		.loc 1 175 41 view .LVU205
 764 009c 07EB0901 		add	r1, r7, r9
 175:Core/Src/graphics.c **** 		}
 765              		.loc 1 175 4 view .LVU206
 766 00a0 019A     		ldr	r2, [sp, #4]
 767 00a2 09B2     		sxth	r1, r1
 768 00a4 00B2     		sxth	r0, r0
 769 00a6 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 770              	.LVL82:
 771 00aa D8E7     		b	.L37
 772              	.L44:
 178:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 773              		.loc 1 178 4 is_stmt 1 view .LVU207
 178:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 774              		.loc 1 178 33 is_stmt 0 view .LVU208
 775 00ac BDF80CA0 		ldrh	r10, [sp, #12]
 776 00b0 07EB0A00 		add	r0, r7, r10
 178:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 777              		.loc 1 178 41 view .LVU209
 778 00b4 BDF81090 		ldrh	r9, [sp, #16]
 779 00b8 1FFA88FB 		uxth	fp, r8
 780 00bc A9EB0B01 		sub	r1, r9, fp
 178:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 + y, y0 - x, color);
 781              		.loc 1 178 4 view .LVU210
 782 00c0 019A     		ldr	r2, [sp, #4]
 783 00c2 09B2     		sxth	r1, r1
 784 00c4 00B2     		sxth	r0, r0
 785 00c6 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 786              	.LVL83:
 179:Core/Src/graphics.c **** 		}
 787              		.loc 1 179 4 is_stmt 1 view .LVU211
 179:Core/Src/graphics.c **** 		}
 788              		.loc 1 179 33 is_stmt 0 view .LVU212
 789 00ca 0AEB0B00 		add	r0, r10, fp
 179:Core/Src/graphics.c **** 		}
ARM GAS  /tmp/cczeTd9s.s 			page 19


 790              		.loc 1 179 41 view .LVU213
 791 00ce A9EB0701 		sub	r1, r9, r7
 179:Core/Src/graphics.c **** 		}
 792              		.loc 1 179 4 view .LVU214
 793 00d2 019A     		ldr	r2, [sp, #4]
 794 00d4 09B2     		sxth	r1, r1
 795 00d6 00B2     		sxth	r0, r0
 796 00d8 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 797              	.LVL84:
 798 00dc C2E7     		b	.L38
 799              	.L45:
 182:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 800              		.loc 1 182 4 is_stmt 1 view .LVU215
 182:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 801              		.loc 1 182 33 is_stmt 0 view .LVU216
 802 00de BDF80C90 		ldrh	r9, [sp, #12]
 803 00e2 1FFA88FA 		uxth	r10, r8
 804 00e6 A9EB0A00 		sub	r0, r9, r10
 182:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 805              		.loc 1 182 41 view .LVU217
 806 00ea BDF810B0 		ldrh	fp, [sp, #16]
 807 00ee 07EB0B01 		add	r1, r7, fp
 182:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 + y, color);
 808              		.loc 1 182 4 view .LVU218
 809 00f2 019A     		ldr	r2, [sp, #4]
 810 00f4 09B2     		sxth	r1, r1
 811 00f6 00B2     		sxth	r0, r0
 812 00f8 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 813              	.LVL85:
 183:Core/Src/graphics.c **** 		}
 814              		.loc 1 183 4 is_stmt 1 view .LVU219
 183:Core/Src/graphics.c **** 		}
 815              		.loc 1 183 33 is_stmt 0 view .LVU220
 816 00fc A9EB0700 		sub	r0, r9, r7
 183:Core/Src/graphics.c **** 		}
 817              		.loc 1 183 41 view .LVU221
 818 0100 0AEB0B01 		add	r1, r10, fp
 183:Core/Src/graphics.c **** 		}
 819              		.loc 1 183 4 view .LVU222
 820 0104 019A     		ldr	r2, [sp, #4]
 821 0106 09B2     		sxth	r1, r1
 822 0108 00B2     		sxth	r0, r0
 823 010a FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 824              	.LVL86:
 825 010e ACE7     		b	.L39
 826              	.L46:
 186:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - y, y0 - x, color);
 827              		.loc 1 186 4 is_stmt 1 view .LVU223
 828              		.loc 1 186 33 is_stmt 0 view .LVU224
 829 0110 BDF80C90 		ldrh	r9, [sp, #12]
 830 0114 1FFA88FB 		uxth	fp, r8
 831 0118 A9EB0B00 		sub	r0, r9, fp
 832              		.loc 1 186 41 view .LVU225
 833 011c BDF810A0 		ldrh	r10, [sp, #16]
 834 0120 AAEB0701 		sub	r1, r10, r7
 835              		.loc 1 186 4 view .LVU226
 836 0124 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/cczeTd9s.s 			page 20


 837 0126 09B2     		sxth	r1, r1
 838 0128 00B2     		sxth	r0, r0
 839 012a FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 840              	.LVL87:
 187:Core/Src/graphics.c **** 			Adafruit_ST7735_drawPixel(x0 - x, y0 - y, color);
 841              		.loc 1 187 4 is_stmt 1 view .LVU227
 842              		.loc 1 187 33 is_stmt 0 view .LVU228
 843 012e A9EB0700 		sub	r0, r9, r7
 844              		.loc 1 187 41 view .LVU229
 845 0132 AAEB0B01 		sub	r1, r10, fp
 846              		.loc 1 187 4 view .LVU230
 847 0136 019A     		ldr	r2, [sp, #4]
 848 0138 09B2     		sxth	r1, r1
 849 013a 00B2     		sxth	r0, r0
 850 013c FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 851              	.LVL88:
 852 0140 96E7     		b	.L35
 853              	.L47:
 188:Core/Src/graphics.c **** 		}
 189:Core/Src/graphics.c **** 	}
 190:Core/Src/graphics.c **** }
 854              		.loc 1 190 1 view .LVU231
 855 0142 07B0     		add	sp, sp, #28
 856              	.LCFI12:
 857              		.cfi_def_cfa_offset 36
 858              		@ sp needed
 859 0144 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 860              		.loc 1 190 1 view .LVU232
 861              		.cfi_endproc
 862              	.LFE151:
 864              		.section	.text.graphics_fillCircleHelper,"ax",%progbits
 865              		.align	1
 866              		.global	graphics_fillCircleHelper
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 871              	graphics_fillCircleHelper:
 872              	.LVL89:
 873              	.LFB153:
 191:Core/Src/graphics.c **** 
 192:Core/Src/graphics.c **** void grahics_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
 193:Core/Src/graphics.c **** {
 194:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 195:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 196:Core/Src/graphics.c **** }
 197:Core/Src/graphics.c **** 
 198:Core/Src/graphics.c **** // Used to do circles and roundrects
 199:Core/Src/graphics.c **** void graphics_fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta
 200:Core/Src/graphics.c **** {
 874              		.loc 1 200 1 is_stmt 1 view -0
 875              		.cfi_startproc
 876              		@ args = 8, pretend = 0, frame = 32
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              		.loc 1 200 1 is_stmt 0 view .LVU234
 879 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 880              	.LCFI13:
 881              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cczeTd9s.s 			page 21


 882              		.cfi_offset 4, -36
 883              		.cfi_offset 5, -32
 884              		.cfi_offset 6, -28
 885              		.cfi_offset 7, -24
 886              		.cfi_offset 8, -20
 887              		.cfi_offset 9, -16
 888              		.cfi_offset 10, -12
 889              		.cfi_offset 11, -8
 890              		.cfi_offset 14, -4
 891 0004 89B0     		sub	sp, sp, #36
 892              	.LCFI14:
 893              		.cfi_def_cfa_offset 72
 894 0006 0390     		str	r0, [sp, #12]
 895 0008 0491     		str	r1, [sp, #16]
 896 000a 1646     		mov	r6, r2
 897 000c 9B46     		mov	fp, r3
 898 000e BDF94830 		ldrsh	r3, [sp, #72]
 899              	.LVL90:
 900              		.loc 1 200 1 view .LVU235
 901 0012 0593     		str	r3, [sp, #20]
 902 0014 BDF84C30 		ldrh	r3, [sp, #76]
 903 0018 0193     		str	r3, [sp, #4]
 201:Core/Src/graphics.c **** 
 202:Core/Src/graphics.c **** 	int16_t f = 1 - r;
 904              		.loc 1 202 2 is_stmt 1 view .LVU236
 905              		.loc 1 202 16 is_stmt 0 view .LVU237
 906 001a 93B2     		uxth	r3, r2
 907 001c C3F10104 		rsb	r4, r3, #1
 908              		.loc 1 202 10 view .LVU238
 909 0020 24B2     		sxth	r4, r4
 910              	.LVL91:
 203:Core/Src/graphics.c **** 	int16_t ddF_x = 1;
 911              		.loc 1 203 2 is_stmt 1 view .LVU239
 204:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 912              		.loc 1 204 2 view .LVU240
 913              		.loc 1 204 21 is_stmt 0 view .LVU241
 914 0022 C3EBC333 		rsb	r3, r3, r3, lsl #15
 915 0026 5B00     		lsls	r3, r3, #1
 916              		.loc 1 204 10 view .LVU242
 917 0028 1BB2     		sxth	r3, r3
 918 002a 0293     		str	r3, [sp, #8]
 919              	.LVL92:
 205:Core/Src/graphics.c **** 	int16_t x = 0;
 920              		.loc 1 205 2 is_stmt 1 view .LVU243
 206:Core/Src/graphics.c **** 	int16_t y = r;
 921              		.loc 1 206 2 view .LVU244
 207:Core/Src/graphics.c **** 
 208:Core/Src/graphics.c **** 	while (x < y) {
 922              		.loc 1 208 2 view .LVU245
 205:Core/Src/graphics.c **** 	int16_t y = r;
 923              		.loc 1 205 10 is_stmt 0 view .LVU246
 924 002c 0025     		movs	r5, #0
 203:Core/Src/graphics.c **** 	int16_t ddF_y = -2 * r;
 925              		.loc 1 203 10 view .LVU247
 926 002e 4FF00109 		mov	r9, #1
 927              		.loc 1 208 8 view .LVU248
 928 0032 18E0     		b	.L50
ARM GAS  /tmp/cczeTd9s.s 			page 22


 929              	.LVL93:
 930              	.L59:
 209:Core/Src/graphics.c **** 		if (f >= 0) {
 210:Core/Src/graphics.c **** 			y--;
 931              		.loc 1 210 4 is_stmt 1 view .LVU249
 932              		.loc 1 210 5 is_stmt 0 view .LVU250
 933 0034 013E     		subs	r6, r6, #1
 934              	.LVL94:
 935              		.loc 1 210 5 view .LVU251
 936 0036 36B2     		sxth	r6, r6
 937              	.LVL95:
 211:Core/Src/graphics.c **** 			ddF_y += 2;
 938              		.loc 1 211 4 is_stmt 1 view .LVU252
 939              		.loc 1 211 10 is_stmt 0 view .LVU253
 940 0038 029B     		ldr	r3, [sp, #8]
 941 003a 0233     		adds	r3, r3, #2
 942 003c 1AB2     		sxth	r2, r3
 943 003e 0292     		str	r2, [sp, #8]
 944              	.LVL96:
 212:Core/Src/graphics.c **** 			f += ddF_y;
 945              		.loc 1 212 4 is_stmt 1 view .LVU254
 946              		.loc 1 212 6 is_stmt 0 view .LVU255
 947 0040 14FA83F3 		uxtah	r3, r4, r3
 948 0044 1CB2     		sxth	r4, r3
 949              	.LVL97:
 950              	.L51:
 213:Core/Src/graphics.c **** 		}
 214:Core/Src/graphics.c **** 		x++;
 951              		.loc 1 214 3 is_stmt 1 view .LVU256
 952              		.loc 1 214 4 is_stmt 0 view .LVU257
 953 0046 0135     		adds	r5, r5, #1
 954              	.LVL98:
 955              		.loc 1 214 4 view .LVU258
 956 0048 AFB2     		uxth	r7, r5
 957 004a 2DB2     		sxth	r5, r5
 958              	.LVL99:
 215:Core/Src/graphics.c **** 		ddF_x += 2;
 959              		.loc 1 215 3 is_stmt 1 view .LVU259
 960              		.loc 1 215 9 is_stmt 0 view .LVU260
 961 004c 09F10203 		add	r3, r9, #2
 962 0050 0FFA83F9 		sxth	r9, r3
 963              	.LVL100:
 216:Core/Src/graphics.c **** 		f += ddF_x;
 964              		.loc 1 216 3 is_stmt 1 view .LVU261
 965              		.loc 1 216 5 is_stmt 0 view .LVU262
 966 0054 14FA83F3 		uxtah	r3, r4, r3
 967 0058 1CB2     		sxth	r4, r3
 968              	.LVL101:
 217:Core/Src/graphics.c **** 
 218:Core/Src/graphics.c **** 		if (cornername & 0x1) {
 969              		.loc 1 218 3 is_stmt 1 view .LVU263
 970              		.loc 1 218 6 is_stmt 0 view .LVU264
 971 005a 1BF0010F 		tst	fp, #1
 972 005e 07D1     		bne	.L56
 973              	.L52:
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 220:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
ARM GAS  /tmp/cczeTd9s.s 			page 23


 221:Core/Src/graphics.c **** 		}
 222:Core/Src/graphics.c **** 		if (cornername & 0x2) {
 974              		.loc 1 222 3 is_stmt 1 view .LVU265
 975              		.loc 1 222 6 is_stmt 0 view .LVU266
 976 0060 1BF0020F 		tst	fp, #2
 977 0064 2DD1     		bne	.L57
 978              	.LVL102:
 979              	.L50:
 208:Core/Src/graphics.c **** 		if (f >= 0) {
 980              		.loc 1 208 11 is_stmt 1 view .LVU267
 981 0066 B542     		cmp	r5, r6
 982 0068 54DA     		bge	.L58
 209:Core/Src/graphics.c **** 			y--;
 983              		.loc 1 209 3 view .LVU268
 209:Core/Src/graphics.c **** 			y--;
 984              		.loc 1 209 6 is_stmt 0 view .LVU269
 985 006a 002C     		cmp	r4, #0
 986 006c E2DA     		bge	.L59
 987 006e EAE7     		b	.L51
 988              	.L56:
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 989              		.loc 1 219 4 is_stmt 1 view .LVU270
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 990              		.loc 1 219 37 is_stmt 0 view .LVU271
 991 0070 BDF80C30 		ldrh	r3, [sp, #12]
 992 0074 0693     		str	r3, [sp, #24]
 993 0076 F818     		adds	r0, r7, r3
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 994              		.loc 1 219 45 view .LVU272
 995 0078 BDF81030 		ldrh	r3, [sp, #16]
 996 007c 1FFA86FA 		uxth	r10, r6
 997 0080 0793     		str	r3, [sp, #28]
 998 0082 A3EB0A01 		sub	r1, r3, r10
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 999              		.loc 1 219 52 view .LVU273
 1000 0086 4FEA4A02 		lsl	r2, r10, #1
 1001 008a 92B2     		uxth	r2, r2
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 1002              		.loc 1 219 60 view .LVU274
 1003 008c BDF81480 		ldrh	r8, [sp, #20]
 1004 0090 4244     		add	r2, r2, r8
 1005 0092 0132     		adds	r2, r2, #1
 219:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 1006              		.loc 1 219 4 view .LVU275
 1007 0094 019B     		ldr	r3, [sp, #4]
 1008 0096 12B2     		sxth	r2, r2
 1009 0098 09B2     		sxth	r1, r1
 1010 009a 00B2     		sxth	r0, r0
 1011 009c FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1012              	.LVL103:
 220:Core/Src/graphics.c **** 		}
 1013              		.loc 1 220 4 is_stmt 1 view .LVU276
 220:Core/Src/graphics.c **** 		}
 1014              		.loc 1 220 37 is_stmt 0 view .LVU277
 1015 00a0 069A     		ldr	r2, [sp, #24]
 1016 00a2 02EB0A00 		add	r0, r2, r10
 220:Core/Src/graphics.c **** 		}
ARM GAS  /tmp/cczeTd9s.s 			page 24


 1017              		.loc 1 220 45 view .LVU278
 1018 00a6 0799     		ldr	r1, [sp, #28]
 1019 00a8 C91B     		subs	r1, r1, r7
 220:Core/Src/graphics.c **** 		}
 1020              		.loc 1 220 52 view .LVU279
 1021 00aa 7B00     		lsls	r3, r7, #1
 1022 00ac 9BB2     		uxth	r3, r3
 220:Core/Src/graphics.c **** 		}
 1023              		.loc 1 220 60 view .LVU280
 1024 00ae 08EB0302 		add	r2, r8, r3
 1025 00b2 0132     		adds	r2, r2, #1
 220:Core/Src/graphics.c **** 		}
 1026              		.loc 1 220 4 view .LVU281
 1027 00b4 019B     		ldr	r3, [sp, #4]
 1028 00b6 12B2     		sxth	r2, r2
 1029 00b8 09B2     		sxth	r1, r1
 1030 00ba 00B2     		sxth	r0, r0
 1031 00bc FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1032              	.LVL104:
 1033 00c0 CEE7     		b	.L52
 1034              	.L57:
 223:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 1035              		.loc 1 223 4 is_stmt 1 view .LVU282
 1036              		.loc 1 223 37 is_stmt 0 view .LVU283
 1037 00c2 BDF80C30 		ldrh	r3, [sp, #12]
 1038 00c6 0693     		str	r3, [sp, #24]
 1039 00c8 D81B     		subs	r0, r3, r7
 1040              		.loc 1 223 45 view .LVU284
 1041 00ca BDF81030 		ldrh	r3, [sp, #16]
 1042 00ce 1FFA86FA 		uxth	r10, r6
 1043 00d2 0793     		str	r3, [sp, #28]
 1044 00d4 A3EB0A01 		sub	r1, r3, r10
 1045              		.loc 1 223 52 view .LVU285
 1046 00d8 4FEA4A02 		lsl	r2, r10, #1
 1047 00dc 92B2     		uxth	r2, r2
 1048              		.loc 1 223 60 view .LVU286
 1049 00de BDF81480 		ldrh	r8, [sp, #20]
 1050 00e2 4244     		add	r2, r2, r8
 1051 00e4 0132     		adds	r2, r2, #1
 1052              		.loc 1 223 4 view .LVU287
 1053 00e6 019B     		ldr	r3, [sp, #4]
 1054 00e8 12B2     		sxth	r2, r2
 1055 00ea 09B2     		sxth	r1, r1
 1056 00ec 00B2     		sxth	r0, r0
 1057 00ee FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1058              	.LVL105:
 224:Core/Src/graphics.c **** 			Adafruit_ST7735_drawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 1059              		.loc 1 224 4 is_stmt 1 view .LVU288
 1060              		.loc 1 224 37 is_stmt 0 view .LVU289
 1061 00f2 069A     		ldr	r2, [sp, #24]
 1062 00f4 A2EB0A00 		sub	r0, r2, r10
 1063              		.loc 1 224 45 view .LVU290
 1064 00f8 0799     		ldr	r1, [sp, #28]
 1065 00fa C91B     		subs	r1, r1, r7
 1066              		.loc 1 224 52 view .LVU291
 1067 00fc 7F00     		lsls	r7, r7, #1
 1068 00fe BFB2     		uxth	r7, r7
ARM GAS  /tmp/cczeTd9s.s 			page 25


 1069              		.loc 1 224 60 view .LVU292
 1070 0100 08EB0702 		add	r2, r8, r7
 1071 0104 0132     		adds	r2, r2, #1
 1072              		.loc 1 224 4 view .LVU293
 1073 0106 019B     		ldr	r3, [sp, #4]
 1074 0108 12B2     		sxth	r2, r2
 1075 010a 09B2     		sxth	r1, r1
 1076 010c 00B2     		sxth	r0, r0
 1077 010e FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1078              	.LVL106:
 1079 0112 A8E7     		b	.L50
 1080              	.L58:
 225:Core/Src/graphics.c **** 		}
 226:Core/Src/graphics.c **** 	}
 227:Core/Src/graphics.c **** }
 1081              		.loc 1 227 1 view .LVU294
 1082 0114 09B0     		add	sp, sp, #36
 1083              	.LCFI15:
 1084              		.cfi_def_cfa_offset 36
 1085              		@ sp needed
 1086 0116 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1087              		.loc 1 227 1 view .LVU295
 1088              		.cfi_endproc
 1089              	.LFE153:
 1091              		.section	.text.grahics_fillCircle,"ax",%progbits
 1092              		.align	1
 1093              		.global	grahics_fillCircle
 1094              		.syntax unified
 1095              		.thumb
 1096              		.thumb_func
 1098              	grahics_fillCircle:
 1099              	.LVL107:
 1100              	.LFB152:
 193:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 1101              		.loc 1 193 1 is_stmt 1 view -0
 1102              		.cfi_startproc
 1103              		@ args = 0, pretend = 0, frame = 0
 1104              		@ frame_needed = 0, uses_anonymous_args = 0
 193:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastVLine(x0, y0 - r, 2 * r + 1, color);
 1105              		.loc 1 193 1 is_stmt 0 view .LVU297
 1106 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1107              	.LCFI16:
 1108              		.cfi_def_cfa_offset 20
 1109              		.cfi_offset 4, -20
 1110              		.cfi_offset 5, -16
 1111              		.cfi_offset 6, -12
 1112              		.cfi_offset 7, -8
 1113              		.cfi_offset 14, -4
 1114 0002 83B0     		sub	sp, sp, #12
 1115              	.LCFI17:
 1116              		.cfi_def_cfa_offset 32
 1117 0004 0646     		mov	r6, r0
 1118 0006 0C46     		mov	r4, r1
 1119 0008 1546     		mov	r5, r2
 1120 000a 1F46     		mov	r7, r3
 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1121              		.loc 1 194 2 is_stmt 1 view .LVU298
ARM GAS  /tmp/cczeTd9s.s 			page 26


 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1122              		.loc 1 194 39 is_stmt 0 view .LVU299
 1123 000c 1FFA82FC 		uxth	ip, r2
 1124 0010 A1EB0C01 		sub	r1, r1, ip
 1125              	.LVL108:
 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1126              		.loc 1 194 46 view .LVU300
 1127 0014 4FEA4C0C 		lsl	ip, ip, #1
 1128 0018 1FFA8CFC 		uxth	ip, ip
 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1129              		.loc 1 194 50 view .LVU301
 1130 001c 0CF1010C 		add	ip, ip, #1
 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1131              		.loc 1 194 2 view .LVU302
 1132 0020 0FFA8CF2 		sxth	r2, ip
 1133              	.LVL109:
 194:Core/Src/graphics.c **** 	graphics_fillCircleHelper(x0, y0, r, 3, 0, color);
 1134              		.loc 1 194 2 view .LVU303
 1135 0024 09B2     		sxth	r1, r1
 1136 0026 FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1137              	.LVL110:
 195:Core/Src/graphics.c **** }
 1138              		.loc 1 195 2 is_stmt 1 view .LVU304
 1139 002a 0197     		str	r7, [sp, #4]
 1140 002c 0023     		movs	r3, #0
 1141 002e 0093     		str	r3, [sp]
 1142 0030 0323     		movs	r3, #3
 1143 0032 2A46     		mov	r2, r5
 1144 0034 2146     		mov	r1, r4
 1145 0036 3046     		mov	r0, r6
 1146 0038 FFF7FEFF 		bl	graphics_fillCircleHelper
 1147              	.LVL111:
 196:Core/Src/graphics.c **** 
 1148              		.loc 1 196 1 is_stmt 0 view .LVU305
 1149 003c 03B0     		add	sp, sp, #12
 1150              	.LCFI18:
 1151              		.cfi_def_cfa_offset 20
 1152              		@ sp needed
 1153 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 1154              		.cfi_endproc
 1155              	.LFE152:
 1157              		.section	.text.graphics_drawRect,"ax",%progbits
 1158              		.align	1
 1159              		.global	graphics_drawRect
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1164              	graphics_drawRect:
 1165              	.LVL112:
 1166              	.LFB154:
 228:Core/Src/graphics.c **** 
 229:Core/Src/graphics.c **** // Draw a rectangle
 230:Core/Src/graphics.c **** void graphics_drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
 231:Core/Src/graphics.c **** {
 1167              		.loc 1 231 1 is_stmt 1 view -0
 1168              		.cfi_startproc
 1169              		@ args = 4, pretend = 0, frame = 0
ARM GAS  /tmp/cczeTd9s.s 			page 27


 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              		.loc 1 231 1 is_stmt 0 view .LVU307
 1172 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1173              	.LCFI19:
 1174              		.cfi_def_cfa_offset 24
 1175              		.cfi_offset 4, -24
 1176              		.cfi_offset 5, -20
 1177              		.cfi_offset 6, -16
 1178              		.cfi_offset 7, -12
 1179              		.cfi_offset 8, -8
 1180              		.cfi_offset 14, -4
 1181 0004 0446     		mov	r4, r0
 1182 0006 0D46     		mov	r5, r1
 1183 0008 9046     		mov	r8, r2
 1184 000a 1E46     		mov	r6, r3
 1185 000c BDF81870 		ldrh	r7, [sp, #24]
 232:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastHLine(x, y, w, color);
 1186              		.loc 1 232 2 is_stmt 1 view .LVU308
 1187 0010 3B46     		mov	r3, r7
 1188              	.LVL113:
 1189              		.loc 1 232 2 is_stmt 0 view .LVU309
 1190 0012 FFF7FEFF 		bl	Adafruit_ST7735_drawFastHLine
 1191              	.LVL114:
 233:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastHLine(x, y + h - 1, w, color);
 1192              		.loc 1 233 2 is_stmt 1 view .LVU310
 1193              		.loc 1 233 37 is_stmt 0 view .LVU311
 1194 0016 A919     		adds	r1, r5, r6
 1195 0018 89B2     		uxth	r1, r1
 1196              		.loc 1 233 41 view .LVU312
 1197 001a 0139     		subs	r1, r1, #1
 1198              		.loc 1 233 2 view .LVU313
 1199 001c 3B46     		mov	r3, r7
 1200 001e 4246     		mov	r2, r8
 1201 0020 09B2     		sxth	r1, r1
 1202 0022 2046     		mov	r0, r4
 1203 0024 FFF7FEFF 		bl	Adafruit_ST7735_drawFastHLine
 1204              	.LVL115:
 234:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastVLine(x, y, h, color);
 1205              		.loc 1 234 2 is_stmt 1 view .LVU314
 1206 0028 3B46     		mov	r3, r7
 1207 002a 3246     		mov	r2, r6
 1208 002c 2946     		mov	r1, r5
 1209 002e 2046     		mov	r0, r4
 1210 0030 FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1211              	.LVL116:
 235:Core/Src/graphics.c **** 	Adafruit_ST7735_drawFastVLine(x + w - 1, y, h, color);
 1212              		.loc 1 235 2 view .LVU315
 1213              		.loc 1 235 34 is_stmt 0 view .LVU316
 1214 0034 04EB0800 		add	r0, r4, r8
 1215 0038 80B2     		uxth	r0, r0
 1216              		.loc 1 235 38 view .LVU317
 1217 003a 0138     		subs	r0, r0, #1
 1218              		.loc 1 235 2 view .LVU318
 1219 003c 3B46     		mov	r3, r7
 1220 003e 3246     		mov	r2, r6
 1221 0040 2946     		mov	r1, r5
 1222 0042 00B2     		sxth	r0, r0
ARM GAS  /tmp/cczeTd9s.s 			page 28


 1223 0044 FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1224              	.LVL117:
 236:Core/Src/graphics.c **** }
 1225              		.loc 1 236 1 view .LVU319
 1226 0048 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1227              		.loc 1 236 1 view .LVU320
 1228              		.cfi_endproc
 1229              	.LFE154:
 1231              		.section	.text.graphics_fillRect,"ax",%progbits
 1232              		.align	1
 1233              		.global	graphics_fillRect
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1238              	graphics_fillRect:
 1239              	.LVL118:
 1240              	.LFB155:
 237:Core/Src/graphics.c **** 
 238:Core/Src/graphics.c **** //
 239:Core/Src/graphics.c **** void graphics_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
 240:Core/Src/graphics.c **** {
 1241              		.loc 1 240 1 is_stmt 1 view -0
 1242              		.cfi_startproc
 1243              		@ args = 4, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              		.loc 1 240 1 is_stmt 0 view .LVU322
 1246 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1247              	.LCFI20:
 1248              		.cfi_def_cfa_offset 32
 1249              		.cfi_offset 3, -32
 1250              		.cfi_offset 4, -28
 1251              		.cfi_offset 5, -24
 1252              		.cfi_offset 6, -20
 1253              		.cfi_offset 7, -16
 1254              		.cfi_offset 8, -12
 1255              		.cfi_offset 9, -8
 1256              		.cfi_offset 14, -4
 1257 0004 0546     		mov	r5, r0
 1258 0006 8846     		mov	r8, r1
 1259 0008 1646     		mov	r6, r2
 1260 000a 1F46     		mov	r7, r3
 1261 000c BDF82090 		ldrh	r9, [sp, #32]
 241:Core/Src/graphics.c **** 	// Update in subclasses if desired!
 242:Core/Src/graphics.c **** 	for (int16_t i = x; i < x + w; i++) {
 1262              		.loc 1 242 2 is_stmt 1 view .LVU323
 1263              	.LBB2:
 1264              		.loc 1 242 7 view .LVU324
 1265              	.LVL119:
 1266              		.loc 1 242 15 is_stmt 0 view .LVU325
 1267 0010 0446     		mov	r4, r0
 1268              		.loc 1 242 2 view .LVU326
 1269 0012 07E0     		b	.L65
 1270              	.LVL120:
 1271              	.L66:
 243:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1272              		.loc 1 243 3 is_stmt 1 discriminator 3 view .LVU327
 1273 0014 4B46     		mov	r3, r9
ARM GAS  /tmp/cczeTd9s.s 			page 29


 1274 0016 3A46     		mov	r2, r7
 1275 0018 4146     		mov	r1, r8
 1276 001a 2046     		mov	r0, r4
 1277 001c FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1278              	.LVL121:
 242:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1279              		.loc 1 242 34 discriminator 3 view .LVU328
 1280 0020 0134     		adds	r4, r4, #1
 1281              	.LVL122:
 242:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1282              		.loc 1 242 34 is_stmt 0 discriminator 3 view .LVU329
 1283 0022 24B2     		sxth	r4, r4
 1284              	.LVL123:
 1285              	.L65:
 242:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1286              		.loc 1 242 24 is_stmt 1 discriminator 1 view .LVU330
 242:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1287              		.loc 1 242 28 is_stmt 0 discriminator 1 view .LVU331
 1288 0024 05EB060C 		add	ip, r5, r6
 242:Core/Src/graphics.c **** 		Adafruit_ST7735_drawFastVLine(i, y, h, color);
 1289              		.loc 1 242 24 discriminator 1 view .LVU332
 1290 0028 6445     		cmp	r4, ip
 1291 002a F3DB     		blt	.L66
 1292              	.LBE2:
 244:Core/Src/graphics.c **** 	}
 245:Core/Src/graphics.c **** }
 1293              		.loc 1 245 1 view .LVU333
 1294 002c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1295              		.loc 1 245 1 view .LVU334
 1296              		.cfi_endproc
 1297              	.LFE155:
 1299              		.section	.text.graphics_width,"ax",%progbits
 1300              		.align	1
 1301              		.global	graphics_width
 1302              		.syntax unified
 1303              		.thumb
 1304              		.thumb_func
 1306              	graphics_width:
 1307              	.LFB156:
 246:Core/Src/graphics.c **** 
 247:Core/Src/graphics.c **** // Return the size of the display (per current rotation)
 248:Core/Src/graphics.c **** int16_t graphics_width(void)
 249:Core/Src/graphics.c **** {
 1308              		.loc 1 249 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 0, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 1312              		@ link register save eliminated.
 250:Core/Src/graphics.c **** 	return gfx_prop.width;
 1313              		.loc 1 250 2 view .LVU336
 251:Core/Src/graphics.c **** }
 1314              		.loc 1 251 1 is_stmt 0 view .LVU337
 1315 0000 014B     		ldr	r3, .L69
 1316 0002 B3F90000 		ldrsh	r0, [r3]
 1317 0006 7047     		bx	lr
 1318              	.L70:
 1319              		.align	2
ARM GAS  /tmp/cczeTd9s.s 			page 30


 1320              	.L69:
 1321 0008 00000000 		.word	gfx_prop
 1322              		.cfi_endproc
 1323              	.LFE156:
 1325              		.section	.text.graphics_height,"ax",%progbits
 1326              		.align	1
 1327              		.global	graphics_height
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1332              	graphics_height:
 1333              	.LFB157:
 252:Core/Src/graphics.c **** 
 253:Core/Src/graphics.c **** int16_t graphics_height(void)
 254:Core/Src/graphics.c **** {
 1334              		.loc 1 254 1 is_stmt 1 view -0
 1335              		.cfi_startproc
 1336              		@ args = 0, pretend = 0, frame = 0
 1337              		@ frame_needed = 0, uses_anonymous_args = 0
 1338              		@ link register save eliminated.
 255:Core/Src/graphics.c **** 	return gfx_prop.height;
 1339              		.loc 1 255 2 view .LVU339
 256:Core/Src/graphics.c **** }
 1340              		.loc 1 256 1 is_stmt 0 view .LVU340
 1341 0000 014B     		ldr	r3, .L72
 1342 0002 B3F90200 		ldrsh	r0, [r3, #2]
 1343 0006 7047     		bx	lr
 1344              	.L73:
 1345              		.align	2
 1346              	.L72:
 1347 0008 00000000 		.word	gfx_prop
 1348              		.cfi_endproc
 1349              	.LFE157:
 1351              		.section	.text.graphics_drawChar,"ax",%progbits
 1352              		.align	1
 1353              		.global	graphics_drawChar
 1354              		.syntax unified
 1355              		.thumb
 1356              		.thumb_func
 1358              	graphics_drawChar:
 1359              	.LVL124:
 1360              	.LFB158:
 257:Core/Src/graphics.c **** 
 258:Core/Src/graphics.c **** 
 259:Core/Src/graphics.c **** // TEXT- AND CHARACTER-HANDLING FUNCTIONS ----------------------------------
 260:Core/Src/graphics.c **** 
 261:Core/Src/graphics.c **** // Draw a character
 262:Core/Src/graphics.c **** void graphics_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t 
 263:Core/Src/graphics.c **** {
 1361              		.loc 1 263 1 is_stmt 1 view -0
 1362              		.cfi_startproc
 1363              		@ args = 8, pretend = 0, frame = 32
 1364              		@ frame_needed = 0, uses_anonymous_args = 0
 1365              		.loc 1 263 1 is_stmt 0 view .LVU342
 1366 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1367              	.LCFI21:
 1368              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cczeTd9s.s 			page 31


 1369              		.cfi_offset 4, -36
 1370              		.cfi_offset 5, -32
 1371              		.cfi_offset 6, -28
 1372              		.cfi_offset 7, -24
 1373              		.cfi_offset 8, -20
 1374              		.cfi_offset 9, -16
 1375              		.cfi_offset 10, -12
 1376              		.cfi_offset 11, -8
 1377              		.cfi_offset 14, -4
 1378 0004 8BB0     		sub	sp, sp, #44
 1379              	.LCFI22:
 1380              		.cfi_def_cfa_offset 80
 1381 0006 0290     		str	r0, [sp, #8]
 1382 0008 0391     		str	r1, [sp, #12]
 1383 000a 1546     		mov	r5, r2
 1384 000c 0493     		str	r3, [sp, #16]
 1385 000e BDF85070 		ldrh	r7, [sp, #80]
 1386 0012 9DF85480 		ldrb	r8, [sp, #84]	@ zero_extendqisi2
 264:Core/Src/graphics.c **** 	if (!gfx_prop.font) {	// 'Classic' built-in font
 1387              		.loc 1 264 2 is_stmt 1 view .LVU343
 1388              		.loc 1 264 15 is_stmt 0 view .LVU344
 1389 0016 7D4B     		ldr	r3, .L105
 1390              	.LVL125:
 1391              		.loc 1 264 15 view .LVU345
 1392 0018 D3F814A0 		ldr	r10, [r3, #20]
 1393              		.loc 1 264 5 view .LVU346
 1394 001c BAF1000F 		cmp	r10, #0
 1395 0020 1DD0     		beq	.L97
 1396              	.LBB3:
 265:Core/Src/graphics.c **** 
 266:Core/Src/graphics.c **** 		if ((x >= gfx_prop.width) ||	// Clip right
 267:Core/Src/graphics.c **** 		    (y >= gfx_prop.height) ||	// Clip bottom
 268:Core/Src/graphics.c **** 		    ((x + 6 * size - 1) < 0) ||	// Clip left
 269:Core/Src/graphics.c **** 		    ((y + 8 * size - 1) < 0))	// Clip top
 270:Core/Src/graphics.c **** 			{
 271:Core/Src/graphics.c **** 			//printf("Clipped\r\n");
 272:Core/Src/graphics.c **** 			return;
 273:Core/Src/graphics.c **** 		}
 274:Core/Src/graphics.c **** 
 275:Core/Src/graphics.c **** 		if (!gfx_prop.cp437 && (c >= 176))
 276:Core/Src/graphics.c **** 			c++;	// Handle 'classic' charset behavior
 277:Core/Src/graphics.c **** 
 278:Core/Src/graphics.c **** 		for (int8_t i = 0; i < 5; i++) {	// Char bitmap = 5 columns
 279:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 280:Core/Src/graphics.c **** 			for (int8_t j = 0; j < 8; j++, line >>= 1) {
 281:Core/Src/graphics.c **** 				if (line & 1) {
 282:Core/Src/graphics.c **** 					if (size == 1)
 283:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, color);
 284:Core/Src/graphics.c **** 					else
 285:Core/Src/graphics.c **** 						graphics_fillRect(x + i * size, y + j * size, size, size, color);
 286:Core/Src/graphics.c **** 				} else if (bg != color) {
 287:Core/Src/graphics.c **** 					if (size == 1)
 288:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, bg);
 289:Core/Src/graphics.c **** 					else
 290:Core/Src/graphics.c **** 						graphics_fillRect(x + i * size, y + j * size, size, size, bg);
 291:Core/Src/graphics.c **** 				}
 292:Core/Src/graphics.c **** 			}
ARM GAS  /tmp/cczeTd9s.s 			page 32


 293:Core/Src/graphics.c **** 		}
 294:Core/Src/graphics.c **** 		if (bg != color) {	// If opaque, draw vertical line for last column
 295:Core/Src/graphics.c **** 			if (size == 1)
 296:Core/Src/graphics.c **** 				Adafruit_ST7735_drawFastVLine(x + 5, y, 8, bg);
 297:Core/Src/graphics.c **** 			else
 298:Core/Src/graphics.c **** 				graphics_fillRect(x + 5 * size, y, size, 8 * size, bg);
 299:Core/Src/graphics.c **** 		}
 300:Core/Src/graphics.c **** 
 301:Core/Src/graphics.c **** 	} else {		// Custom font
 302:Core/Src/graphics.c **** 
 303:Core/Src/graphics.c **** 		// Character is assumed previously filtered by write() to eliminate
 304:Core/Src/graphics.c **** 		// newlines, returns, non-printable characters, etc.  Calling
 305:Core/Src/graphics.c **** 		// drawChar() directly with 'bad' characters of font may cause mayhem!
 306:Core/Src/graphics.c **** 
 307:Core/Src/graphics.c **** 		c -= (uint8_t) gfx_prop.font->first;
 1397              		.loc 1 307 3 is_stmt 1 view .LVU347
 1398              		.loc 1 307 31 is_stmt 0 view .LVU348
 1399 0022 9AF80830 		ldrb	r3, [r10, #8]	@ zero_extendqisi2
 1400              		.loc 1 307 5 view .LVU349
 1401 0026 D31A     		subs	r3, r2, r3
 1402 0028 DBB2     		uxtb	r3, r3
 1403              	.LVL126:
 308:Core/Src/graphics.c **** 		GFXglyph *glyph = &(((GFXglyph *) (&gfx_prop.font->glyph))[c]);
 1404              		.loc 1 308 3 is_stmt 1 view .LVU350
 1405              		.loc 1 308 38 is_stmt 0 view .LVU351
 1406 002a 0AF10401 		add	r1, r10, #4
 1407              	.LVL127:
 1408              		.loc 1 308 13 view .LVU352
 1409 002e 01EBC302 		add	r2, r1, r3, lsl #3
 1410              	.LVL128:
 309:Core/Src/graphics.c **** 		uint8_t *bitmap = (uint8_t *) (&gfx_prop.font->bitmap);
 1411              		.loc 1 309 3 is_stmt 1 view .LVU353
 310:Core/Src/graphics.c **** 
 311:Core/Src/graphics.c **** 		uint16_t bo = glyph->bitmapOffset;
 1412              		.loc 1 311 3 view .LVU354
 1413              		.loc 1 311 12 is_stmt 0 view .LVU355
 1414 0032 31F83370 		ldrh	r7, [r1, r3, lsl #3]
 1415              	.LVL129:
 312:Core/Src/graphics.c **** 		uint8_t w = glyph->width;
 1416              		.loc 1 312 3 is_stmt 1 view .LVU356
 1417              		.loc 1 312 11 is_stmt 0 view .LVU357
 1418 0036 92F80290 		ldrb	r9, [r2, #2]	@ zero_extendqisi2
 1419              	.LVL130:
 313:Core/Src/graphics.c **** 		uint8_t h = glyph->height;
 1420              		.loc 1 313 3 is_stmt 1 view .LVU358
 1421              		.loc 1 313 11 is_stmt 0 view .LVU359
 1422 003a D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 1423              	.LVL131:
 1424              		.loc 1 313 11 view .LVU360
 1425 003c 0993     		str	r3, [sp, #36]
 1426              	.LVL132:
 314:Core/Src/graphics.c **** 		int8_t xo = glyph->xOffset;
 1427              		.loc 1 314 3 is_stmt 1 view .LVU361
 1428              		.loc 1 314 10 is_stmt 0 view .LVU362
 1429 003e 92F90530 		ldrsb	r3, [r2, #5]
 1430 0042 0793     		str	r3, [sp, #28]
 1431              	.LVL133:
ARM GAS  /tmp/cczeTd9s.s 			page 33


 315:Core/Src/graphics.c **** 		int8_t yo = glyph->yOffset;
 1432              		.loc 1 315 3 is_stmt 1 view .LVU363
 1433              		.loc 1 315 10 is_stmt 0 view .LVU364
 1434 0044 92F90620 		ldrsb	r2, [r2, #6]
 1435              	.LVL134:
 1436              		.loc 1 315 10 view .LVU365
 1437 0048 0892     		str	r2, [sp, #32]
 1438              	.LVL135:
 316:Core/Src/graphics.c **** 		uint8_t xx, yy, bits = 0, bit = 0;
 1439              		.loc 1 316 3 is_stmt 1 view .LVU366
 317:Core/Src/graphics.c **** 		int16_t xo16 = 0, yo16 = 0;
 1440              		.loc 1 317 3 view .LVU367
 318:Core/Src/graphics.c **** 
 319:Core/Src/graphics.c **** 		if (size > 1) {
 1441              		.loc 1 319 3 view .LVU368
 1442              		.loc 1 319 6 is_stmt 0 view .LVU369
 1443 004a B8F1010F 		cmp	r8, #1
 1444 004e 40F29480 		bls	.L94
 320:Core/Src/graphics.c **** 			xo16 = xo;
 1445              		.loc 1 320 4 is_stmt 1 view .LVU370
 1446              		.loc 1 320 9 is_stmt 0 view .LVU371
 1447 0052 0593     		str	r3, [sp, #20]
 1448              	.LVL136:
 321:Core/Src/graphics.c **** 			yo16 = yo;
 1449              		.loc 1 321 4 is_stmt 1 view .LVU372
 1450              		.loc 1 321 9 is_stmt 0 view .LVU373
 1451 0054 0692     		str	r2, [sp, #24]
 1452              	.LVL137:
 1453              	.L87:
 322:Core/Src/graphics.c **** 		}
 323:Core/Src/graphics.c **** 		// Todo: Add character clipping here
 324:Core/Src/graphics.c **** 
 325:Core/Src/graphics.c **** 		// NOTE: THERE IS NO 'BACKGROUND' COLOR OPTION ON CUSTOM FONTS.
 326:Core/Src/graphics.c **** 		// THIS IS ON PURPOSE AND BY DESIGN.  The background color feature
 327:Core/Src/graphics.c **** 		// has typically been used with the 'classic' font to overwrite old
 328:Core/Src/graphics.c **** 		// screen contents with new data.  This ONLY works because the
 329:Core/Src/graphics.c **** 		// characters are a uniform size; it's not a sensible thing to do with
 330:Core/Src/graphics.c **** 		// proportionally-spaced fonts with glyphs of varying sizes (and that
 331:Core/Src/graphics.c **** 		// may overlap).  To replace previously-drawn text when using a custom
 332:Core/Src/graphics.c **** 		// font, use the getTextBounds() function to determine the smallest
 333:Core/Src/graphics.c **** 		// rectangle encompassing a string, erase the area with fillRect(),
 334:Core/Src/graphics.c **** 		// then draw new text.  This WILL infortunately 'blink' the text, but
 335:Core/Src/graphics.c **** 		// is unavoidable.  Drawing 'background' pixels will NOT fix this,
 336:Core/Src/graphics.c **** 		// only creates a new set of problems.  Have an idea to work around
 337:Core/Src/graphics.c **** 		// this (a canvas object type for MCUs that can afford the RAM and
 338:Core/Src/graphics.c **** 		// displays supporting setAddrWindow() and pushColors()), but haven't
 339:Core/Src/graphics.c **** 		// implemented this yet.
 340:Core/Src/graphics.c **** 
 341:Core/Src/graphics.c **** 		for (yy = 0; yy < h; yy++) {
 1454              		.loc 1 341 3 is_stmt 1 view .LVU374
 316:Core/Src/graphics.c **** 		int16_t xo16 = 0, yo16 = 0;
 1455              		.loc 1 316 29 is_stmt 0 view .LVU375
 1456 0056 0023     		movs	r3, #0
 316:Core/Src/graphics.c **** 		int16_t xo16 = 0, yo16 = 0;
 1457              		.loc 1 316 19 view .LVU376
 1458 0058 1D46     		mov	r5, r3
 1459              	.LVL138:
ARM GAS  /tmp/cczeTd9s.s 			page 34


 1460              		.loc 1 341 11 view .LVU377
 1461 005a 9B46     		mov	fp, r3
 1462              		.loc 1 341 3 view .LVU378
 1463 005c D1E0     		b	.L88
 1464              	.LVL139:
 1465              	.L97:
 1466              		.loc 1 341 3 view .LVU379
 1467              	.LBE3:
 266:Core/Src/graphics.c **** 		    (y >= gfx_prop.height) ||	// Clip bottom
 1468              		.loc 1 266 3 is_stmt 1 view .LVU380
 266:Core/Src/graphics.c **** 		    (y >= gfx_prop.height) ||	// Clip bottom
 1469              		.loc 1 266 21 is_stmt 0 view .LVU381
 1470 005e 1B88     		ldrh	r3, [r3]
 266:Core/Src/graphics.c **** 		    (y >= gfx_prop.height) ||	// Clip bottom
 1471              		.loc 1 266 6 view .LVU382
 1472 0060 9842     		cmp	r0, r3
 1473 0062 7EDA     		bge	.L74
 267:Core/Src/graphics.c **** 		    ((x + 6 * size - 1) < 0) ||	// Clip left
 1474              		.loc 1 267 21 discriminator 1 view .LVU383
 1475 0064 694B     		ldr	r3, .L105
 1476 0066 5B88     		ldrh	r3, [r3, #2]
 266:Core/Src/graphics.c **** 		    (y >= gfx_prop.height) ||	// Clip bottom
 1477              		.loc 1 266 29 discriminator 1 view .LVU384
 1478 0068 9942     		cmp	r1, r3
 1479 006a 7ADA     		bge	.L74
 268:Core/Src/graphics.c **** 		    ((y + 8 * size - 1) < 0))	// Clip top
 1480              		.loc 1 268 15 view .LVU385
 1481 006c 08EB4803 		add	r3, r8, r8, lsl #1
 268:Core/Src/graphics.c **** 		    ((y + 8 * size - 1) < 0))	// Clip top
 1482              		.loc 1 268 11 view .LVU386
 1483 0070 00EB4303 		add	r3, r0, r3, lsl #1
 267:Core/Src/graphics.c **** 		    ((x + 6 * size - 1) < 0) ||	// Clip left
 1484              		.loc 1 267 30 view .LVU387
 1485 0074 002B     		cmp	r3, #0
 1486 0076 74DD     		ble	.L74
 269:Core/Src/graphics.c **** 			{
 1487              		.loc 1 269 11 view .LVU388
 1488 0078 01EBC803 		add	r3, r1, r8, lsl #3
 268:Core/Src/graphics.c **** 		    ((y + 8 * size - 1) < 0))	// Clip top
 1489              		.loc 1 268 32 view .LVU389
 1490 007c 002B     		cmp	r3, #0
 1491 007e 70DD     		ble	.L74
 275:Core/Src/graphics.c **** 			c++;	// Handle 'classic' charset behavior
 1492              		.loc 1 275 3 is_stmt 1 view .LVU390
 275:Core/Src/graphics.c **** 			c++;	// Handle 'classic' charset behavior
 1493              		.loc 1 275 16 is_stmt 0 view .LVU391
 1494 0080 624B     		ldr	r3, .L105
 1495 0082 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 275:Core/Src/graphics.c **** 			c++;	// Handle 'classic' charset behavior
 1496              		.loc 1 275 6 view .LVU392
 1497 0084 1BB9     		cbnz	r3, .L77
 275:Core/Src/graphics.c **** 			c++;	// Handle 'classic' charset behavior
 1498              		.loc 1 275 23 discriminator 1 view .LVU393
 1499 0086 AF2D     		cmp	r5, #175
 1500 0088 01D9     		bls	.L77
 276:Core/Src/graphics.c **** 
 1501              		.loc 1 276 4 is_stmt 1 view .LVU394
ARM GAS  /tmp/cczeTd9s.s 			page 35


 276:Core/Src/graphics.c **** 
 1502              		.loc 1 276 5 is_stmt 0 view .LVU395
 1503 008a 0135     		adds	r5, r5, #1
 1504 008c EDB2     		uxtb	r5, r5
 1505              	.LVL140:
 1506              	.L77:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1507              		.loc 1 278 3 is_stmt 1 view .LVU396
 1508              	.LBB4:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1509              		.loc 1 278 8 view .LVU397
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1510              		.loc 1 278 15 is_stmt 0 view .LVU398
 1511 008e 4FF00009 		mov	r9, #0
 1512 0092 DDF808A0 		ldr	r10, [sp, #8]
 1513 0096 DDF80CB0 		ldr	fp, [sp, #12]
 1514 009a AC46     		mov	ip, r5
 1515 009c 049D     		ldr	r5, [sp, #16]
 1516              	.LVL141:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1517              		.loc 1 278 3 view .LVU399
 1518 009e 42E0     		b	.L78
 1519              	.LVL142:
 1520              	.L81:
 1521              	.LBB5:
 1522              	.LBB6:
 285:Core/Src/graphics.c **** 				} else if (bg != color) {
 1523              		.loc 1 285 7 is_stmt 1 view .LVU400
 285:Core/Src/graphics.c **** 				} else if (bg != color) {
 1524              		.loc 1 285 27 is_stmt 0 view .LVU401
 1525 00a0 09FB08A0 		mla	r0, r9, r8, r10
 285:Core/Src/graphics.c **** 				} else if (bg != color) {
 1526              		.loc 1 285 41 view .LVU402
 1527 00a4 04FB08B1 		mla	r1, r4, r8, fp
 285:Core/Src/graphics.c **** 				} else if (bg != color) {
 1528              		.loc 1 285 7 view .LVU403
 1529 00a8 0FFA88F2 		sxth	r2, r8
 1530 00ac 0095     		str	r5, [sp]
 1531 00ae 1346     		mov	r3, r2
 1532 00b0 09B2     		sxth	r1, r1
 1533 00b2 00B2     		sxth	r0, r0
 1534 00b4 FFF7FEFF 		bl	graphics_fillRect
 1535              	.LVL143:
 1536              	.L82:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1537              		.loc 1 280 33 is_stmt 1 discriminator 2 view .LVU404
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1538              		.loc 1 280 31 is_stmt 0 discriminator 2 view .LVU405
 1539 00b8 0134     		adds	r4, r4, #1
 1540              	.LVL144:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1541              		.loc 1 280 31 discriminator 2 view .LVU406
 1542 00ba 64B2     		sxtb	r4, r4
 1543              	.LVL145:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1544              		.loc 1 280 40 discriminator 2 view .LVU407
 1545 00bc 7608     		lsrs	r6, r6, #1
ARM GAS  /tmp/cczeTd9s.s 			page 36


 1546              	.LVL146:
 1547              	.L79:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1548              		.loc 1 280 25 is_stmt 1 discriminator 1 view .LVU408
 1549 00be 072C     		cmp	r4, #7
 1550 00c0 2BDC     		bgt	.L98
 281:Core/Src/graphics.c **** 					if (size == 1)
 1551              		.loc 1 281 5 view .LVU409
 281:Core/Src/graphics.c **** 					if (size == 1)
 1552              		.loc 1 281 8 is_stmt 0 view .LVU410
 1553 00c2 16F0010F 		tst	r6, #1
 1554 00c6 0CD0     		beq	.L80
 282:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, color);
 1555              		.loc 1 282 6 is_stmt 1 view .LVU411
 282:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, color);
 1556              		.loc 1 282 9 is_stmt 0 view .LVU412
 1557 00c8 B8F1010F 		cmp	r8, #1
 1558 00cc E8D1     		bne	.L81
 283:Core/Src/graphics.c **** 					else
 1559              		.loc 1 283 7 is_stmt 1 view .LVU413
 283:Core/Src/graphics.c **** 					else
 1560              		.loc 1 283 35 is_stmt 0 view .LVU414
 1561 00ce 09EB0A00 		add	r0, r9, r10
 283:Core/Src/graphics.c **** 					else
 1562              		.loc 1 283 42 view .LVU415
 1563 00d2 04EB0B01 		add	r1, r4, fp
 283:Core/Src/graphics.c **** 					else
 1564              		.loc 1 283 7 view .LVU416
 1565 00d6 2A46     		mov	r2, r5
 1566 00d8 09B2     		sxth	r1, r1
 1567 00da 00B2     		sxth	r0, r0
 1568 00dc FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 1569              	.LVL147:
 1570 00e0 EAE7     		b	.L82
 1571              	.L80:
 286:Core/Src/graphics.c **** 					if (size == 1)
 1572              		.loc 1 286 12 is_stmt 1 view .LVU417
 286:Core/Src/graphics.c **** 					if (size == 1)
 1573              		.loc 1 286 15 is_stmt 0 view .LVU418
 1574 00e2 BD42     		cmp	r5, r7
 1575 00e4 E8D0     		beq	.L82
 287:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, bg);
 1576              		.loc 1 287 6 is_stmt 1 view .LVU419
 287:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + i, y + j, bg);
 1577              		.loc 1 287 9 is_stmt 0 view .LVU420
 1578 00e6 B8F1010F 		cmp	r8, #1
 1579 00ea 0CD0     		beq	.L99
 290:Core/Src/graphics.c **** 				}
 1580              		.loc 1 290 7 is_stmt 1 view .LVU421
 290:Core/Src/graphics.c **** 				}
 1581              		.loc 1 290 27 is_stmt 0 view .LVU422
 1582 00ec 09FB08A0 		mla	r0, r9, r8, r10
 290:Core/Src/graphics.c **** 				}
 1583              		.loc 1 290 41 view .LVU423
 1584 00f0 04FB08B1 		mla	r1, r4, r8, fp
 290:Core/Src/graphics.c **** 				}
 1585              		.loc 1 290 7 view .LVU424
ARM GAS  /tmp/cczeTd9s.s 			page 37


 1586 00f4 0FFA88F2 		sxth	r2, r8
 1587 00f8 0097     		str	r7, [sp]
 1588 00fa 1346     		mov	r3, r2
 1589 00fc 09B2     		sxth	r1, r1
 1590 00fe 00B2     		sxth	r0, r0
 1591 0100 FFF7FEFF 		bl	graphics_fillRect
 1592              	.LVL148:
 1593 0104 D8E7     		b	.L82
 1594              	.L99:
 288:Core/Src/graphics.c **** 					else
 1595              		.loc 1 288 7 is_stmt 1 view .LVU425
 288:Core/Src/graphics.c **** 					else
 1596              		.loc 1 288 35 is_stmt 0 view .LVU426
 1597 0106 09EB0A00 		add	r0, r9, r10
 288:Core/Src/graphics.c **** 					else
 1598              		.loc 1 288 42 view .LVU427
 1599 010a 04EB0B01 		add	r1, r4, fp
 288:Core/Src/graphics.c **** 					else
 1600              		.loc 1 288 7 view .LVU428
 1601 010e 3A46     		mov	r2, r7
 1602 0110 09B2     		sxth	r1, r1
 1603 0112 00B2     		sxth	r0, r0
 1604 0114 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 1605              	.LVL149:
 1606 0118 CEE7     		b	.L82
 1607              	.L98:
 1608              	.LBE6:
 1609              	.LBE5:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1610              		.loc 1 278 30 discriminator 2 view .LVU429
 1611 011a DDF814C0 		ldr	ip, [sp, #20]
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1612              		.loc 1 278 30 is_stmt 1 discriminator 2 view .LVU430
 1613 011e 09F10109 		add	r9, r9, #1
 1614              	.LVL150:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1615              		.loc 1 278 30 is_stmt 0 discriminator 2 view .LVU431
 1616 0122 4FFA89F9 		sxtb	r9, r9
 1617              	.LVL151:
 1618              	.L78:
 278:Core/Src/graphics.c **** 			uint8_t line = font[c * 5 + i];
 1619              		.loc 1 278 24 is_stmt 1 discriminator 1 view .LVU432
 1620 0126 B9F1040F 		cmp	r9, #4
 1621 012a 08DC     		bgt	.L100
 1622              	.LBB8:
 279:Core/Src/graphics.c **** 			for (int8_t j = 0; j < 8; j++, line >>= 1) {
 1623              		.loc 1 279 4 view .LVU433
 279:Core/Src/graphics.c **** 			for (int8_t j = 0; j < 8; j++, line >>= 1) {
 1624              		.loc 1 279 26 is_stmt 0 view .LVU434
 1625 012c 0CEB8C03 		add	r3, ip, ip, lsl #2
 279:Core/Src/graphics.c **** 			for (int8_t j = 0; j < 8; j++, line >>= 1) {
 1626              		.loc 1 279 30 view .LVU435
 1627 0130 4B44     		add	r3, r3, r9
 279:Core/Src/graphics.c **** 			for (int8_t j = 0; j < 8; j++, line >>= 1) {
 1628              		.loc 1 279 12 view .LVU436
 1629 0132 374A     		ldr	r2, .L105+4
 1630 0134 D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
ARM GAS  /tmp/cczeTd9s.s 			page 38


 1631              	.LVL152:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1632              		.loc 1 280 4 is_stmt 1 view .LVU437
 1633              	.LBB7:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1634              		.loc 1 280 9 view .LVU438
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1635              		.loc 1 280 16 is_stmt 0 view .LVU439
 1636 0136 0024     		movs	r4, #0
 1637 0138 CDF814C0 		str	ip, [sp, #20]
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1638              		.loc 1 280 4 view .LVU440
 1639 013c BFE7     		b	.L79
 1640              	.LVL153:
 1641              	.L100:
 280:Core/Src/graphics.c **** 				if (line & 1) {
 1642              		.loc 1 280 4 view .LVU441
 1643              	.LBE7:
 1644              	.LBE8:
 1645              	.LBE4:
 294:Core/Src/graphics.c **** 			if (size == 1)
 1646              		.loc 1 294 3 is_stmt 1 view .LVU442
 294:Core/Src/graphics.c **** 			if (size == 1)
 1647              		.loc 1 294 6 is_stmt 0 view .LVU443
 1648 013e 049B     		ldr	r3, [sp, #16]
 1649 0140 BB42     		cmp	r3, r7
 1650 0142 0ED0     		beq	.L74
 295:Core/Src/graphics.c **** 				Adafruit_ST7735_drawFastVLine(x + 5, y, 8, bg);
 1651              		.loc 1 295 4 is_stmt 1 view .LVU444
 295:Core/Src/graphics.c **** 				Adafruit_ST7735_drawFastVLine(x + 5, y, 8, bg);
 1652              		.loc 1 295 7 is_stmt 0 view .LVU445
 1653 0144 B8F1010F 		cmp	r8, #1
 1654 0148 0ED0     		beq	.L101
 298:Core/Src/graphics.c **** 		}
 1655              		.loc 1 298 5 is_stmt 1 view .LVU446
 298:Core/Src/graphics.c **** 		}
 1656              		.loc 1 298 25 is_stmt 0 view .LVU447
 1657 014a 08EB8800 		add	r0, r8, r8, lsl #2
 1658 014e 029B     		ldr	r3, [sp, #8]
 1659 0150 1844     		add	r0, r0, r3
 298:Core/Src/graphics.c **** 		}
 1660              		.loc 1 298 5 view .LVU448
 1661 0152 0097     		str	r7, [sp]
 1662 0154 4FEAC803 		lsl	r3, r8, #3
 1663 0158 4246     		mov	r2, r8
 1664 015a 0399     		ldr	r1, [sp, #12]
 1665 015c 00B2     		sxth	r0, r0
 1666 015e FFF7FEFF 		bl	graphics_fillRect
 1667              	.LVL154:
 1668              	.L74:
 342:Core/Src/graphics.c **** 			for (xx = 0; xx < w; xx++) {
 343:Core/Src/graphics.c **** 				if (!(bit++ & 7)) {
 344:Core/Src/graphics.c **** 					bits = bitmap[bo++];
 345:Core/Src/graphics.c **** 				}
 346:Core/Src/graphics.c **** 				if (bits & 0x80) {
 347:Core/Src/graphics.c **** 					if (size == 1) {
 348:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + xo + xx, y + yo + yy, color);
ARM GAS  /tmp/cczeTd9s.s 			page 39


 349:Core/Src/graphics.c **** 					} else {
 350:Core/Src/graphics.c **** 						graphics_fillRect(x + (xo16 + xx) * size, y + (yo16 + yy) * size, size, size, color);
 351:Core/Src/graphics.c **** 					}
 352:Core/Src/graphics.c **** 				}
 353:Core/Src/graphics.c **** 				bits <<= 1;
 354:Core/Src/graphics.c **** 			}
 355:Core/Src/graphics.c **** 		}
 356:Core/Src/graphics.c **** 
 357:Core/Src/graphics.c **** 	}			// End classic vs custom font
 358:Core/Src/graphics.c **** }
 1669              		.loc 1 358 1 view .LVU449
 1670 0162 0BB0     		add	sp, sp, #44
 1671              	.LCFI23:
 1672              		.cfi_remember_state
 1673              		.cfi_def_cfa_offset 36
 1674              		@ sp needed
 1675 0164 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1676              	.LVL155:
 1677              	.L101:
 1678              	.LCFI24:
 1679              		.cfi_restore_state
 296:Core/Src/graphics.c **** 			else
 1680              		.loc 1 296 5 is_stmt 1 view .LVU450
 296:Core/Src/graphics.c **** 			else
 1681              		.loc 1 296 37 is_stmt 0 view .LVU451
 1682 0168 0298     		ldr	r0, [sp, #8]
 1683 016a 0530     		adds	r0, r0, #5
 296:Core/Src/graphics.c **** 			else
 1684              		.loc 1 296 5 view .LVU452
 1685 016c 3B46     		mov	r3, r7
 1686 016e 0822     		movs	r2, #8
 1687 0170 0399     		ldr	r1, [sp, #12]
 1688 0172 00B2     		sxth	r0, r0
 1689 0174 FFF7FEFF 		bl	Adafruit_ST7735_drawFastVLine
 1690              	.LVL156:
 1691 0178 F3E7     		b	.L74
 1692              	.LVL157:
 1693              	.L94:
 1694              	.LBB9:
 317:Core/Src/graphics.c **** 
 1695              		.loc 1 317 21 view .LVU453
 1696 017a 0023     		movs	r3, #0
 1697              	.LVL158:
 317:Core/Src/graphics.c **** 
 1698              		.loc 1 317 21 view .LVU454
 1699 017c 0693     		str	r3, [sp, #24]
 317:Core/Src/graphics.c **** 
 1700              		.loc 1 317 11 view .LVU455
 1701 017e 0593     		str	r3, [sp, #20]
 1702 0180 69E7     		b	.L87
 1703              	.LVL159:
 1704              	.L89:
 346:Core/Src/graphics.c **** 					if (size == 1) {
 1705              		.loc 1 346 5 is_stmt 1 view .LVU456
 346:Core/Src/graphics.c **** 					if (size == 1) {
 1706              		.loc 1 346 8 is_stmt 0 view .LVU457
 1707 0182 15F0800F 		tst	r5, #128
ARM GAS  /tmp/cczeTd9s.s 			page 40


 1708 0186 10D1     		bne	.L102
 1709              	.L90:
 353:Core/Src/graphics.c **** 			}
 1710              		.loc 1 353 5 is_stmt 1 discriminator 2 view .LVU458
 353:Core/Src/graphics.c **** 			}
 1711              		.loc 1 353 10 is_stmt 0 discriminator 2 view .LVU459
 1712 0188 6D00     		lsls	r5, r5, #1
 1713              	.LVL160:
 353:Core/Src/graphics.c **** 			}
 1714              		.loc 1 353 10 discriminator 2 view .LVU460
 1715 018a EDB2     		uxtb	r5, r5
 1716              	.LVL161:
 342:Core/Src/graphics.c **** 				if (!(bit++ & 7)) {
 1717              		.loc 1 342 27 is_stmt 1 discriminator 2 view .LVU461
 1718 018c 0134     		adds	r4, r4, #1
 1719              	.LVL162:
 342:Core/Src/graphics.c **** 				if (!(bit++ & 7)) {
 1720              		.loc 1 342 27 is_stmt 0 discriminator 2 view .LVU462
 1721 018e E4B2     		uxtb	r4, r4
 1722              	.LVL163:
 343:Core/Src/graphics.c **** 					bits = bitmap[bo++];
 1723              		.loc 1 343 14 discriminator 2 view .LVU463
 1724 0190 3346     		mov	r3, r6
 1725              	.LVL164:
 1726              	.L93:
 342:Core/Src/graphics.c **** 				if (!(bit++ & 7)) {
 1727              		.loc 1 342 20 is_stmt 1 discriminator 1 view .LVU464
 1728 0192 4C45     		cmp	r4, r9
 1729 0194 31D2     		bcs	.L103
 343:Core/Src/graphics.c **** 					bits = bitmap[bo++];
 1730              		.loc 1 343 5 view .LVU465
 343:Core/Src/graphics.c **** 					bits = bitmap[bo++];
 1731              		.loc 1 343 14 is_stmt 0 view .LVU466
 1732 0196 5E1C     		adds	r6, r3, #1
 1733 0198 F6B2     		uxtb	r6, r6
 1734              	.LVL165:
 343:Core/Src/graphics.c **** 					bits = bitmap[bo++];
 1735              		.loc 1 343 8 view .LVU467
 1736 019a 13F0070F 		tst	r3, #7
 1737 019e F0D1     		bne	.L89
 344:Core/Src/graphics.c **** 				}
 1738              		.loc 1 344 6 is_stmt 1 view .LVU468
 344:Core/Src/graphics.c **** 				}
 1739              		.loc 1 344 22 is_stmt 0 view .LVU469
 1740 01a0 7B1C     		adds	r3, r7, #1
 1741              	.LVL166:
 344:Core/Src/graphics.c **** 				}
 1742              		.loc 1 344 11 view .LVU470
 1743 01a2 1AF80750 		ldrb	r5, [r10, r7]	@ zero_extendqisi2
 1744              	.LVL167:
 344:Core/Src/graphics.c **** 				}
 1745              		.loc 1 344 22 view .LVU471
 1746 01a6 9FB2     		uxth	r7, r3
 1747 01a8 EBE7     		b	.L89
 1748              	.LVL168:
 1749              	.L102:
 347:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + xo + xx, y + yo + yy, color);
ARM GAS  /tmp/cczeTd9s.s 			page 41


 1750              		.loc 1 347 6 is_stmt 1 view .LVU472
 347:Core/Src/graphics.c **** 						Adafruit_ST7735_drawPixel(x + xo + xx, y + yo + yy, color);
 1751              		.loc 1 347 9 is_stmt 0 view .LVU473
 1752 01aa B8F1010F 		cmp	r8, #1
 1753 01ae 14D0     		beq	.L104
 350:Core/Src/graphics.c **** 					}
 1754              		.loc 1 350 7 is_stmt 1 view .LVU474
 350:Core/Src/graphics.c **** 					}
 1755              		.loc 1 350 35 is_stmt 0 view .LVU475
 1756 01b0 059B     		ldr	r3, [sp, #20]
 1757 01b2 1819     		adds	r0, r3, r4
 350:Core/Src/graphics.c **** 					}
 1758              		.loc 1 350 27 view .LVU476
 1759 01b4 029B     		ldr	r3, [sp, #8]
 1760 01b6 00FB0830 		mla	r0, r0, r8, r3
 350:Core/Src/graphics.c **** 					}
 1761              		.loc 1 350 59 view .LVU477
 1762 01ba 069B     		ldr	r3, [sp, #24]
 1763 01bc 03EB0B01 		add	r1, r3, fp
 350:Core/Src/graphics.c **** 					}
 1764              		.loc 1 350 51 view .LVU478
 1765 01c0 039B     		ldr	r3, [sp, #12]
 1766 01c2 01FB0831 		mla	r1, r1, r8, r3
 350:Core/Src/graphics.c **** 					}
 1767              		.loc 1 350 7 view .LVU479
 1768 01c6 0FFA88F2 		sxth	r2, r8
 1769 01ca 049B     		ldr	r3, [sp, #16]
 1770 01cc 0093     		str	r3, [sp]
 1771 01ce 1346     		mov	r3, r2
 1772 01d0 09B2     		sxth	r1, r1
 1773 01d2 00B2     		sxth	r0, r0
 1774 01d4 FFF7FEFF 		bl	graphics_fillRect
 1775              	.LVL169:
 1776 01d8 D6E7     		b	.L90
 1777              	.L104:
 348:Core/Src/graphics.c **** 					} else {
 1778              		.loc 1 348 7 is_stmt 1 view .LVU480
 348:Core/Src/graphics.c **** 					} else {
 1779              		.loc 1 348 35 is_stmt 0 view .LVU481
 1780 01da 079B     		ldr	r3, [sp, #28]
 1781 01dc 029A     		ldr	r2, [sp, #8]
 1782 01de 9818     		adds	r0, r3, r2
 348:Core/Src/graphics.c **** 					} else {
 1783              		.loc 1 348 40 view .LVU482
 1784 01e0 14FA80F0 		uxtah	r0, r4, r0
 348:Core/Src/graphics.c **** 					} else {
 1785              		.loc 1 348 48 view .LVU483
 1786 01e4 089B     		ldr	r3, [sp, #32]
 1787 01e6 039A     		ldr	r2, [sp, #12]
 1788 01e8 9918     		adds	r1, r3, r2
 348:Core/Src/graphics.c **** 					} else {
 1789              		.loc 1 348 53 view .LVU484
 1790 01ea 1BFA81F1 		uxtah	r1, fp, r1
 348:Core/Src/graphics.c **** 					} else {
 1791              		.loc 1 348 7 view .LVU485
 1792 01ee 049A     		ldr	r2, [sp, #16]
 1793 01f0 09B2     		sxth	r1, r1
ARM GAS  /tmp/cczeTd9s.s 			page 42


 1794 01f2 00B2     		sxth	r0, r0
 1795 01f4 FFF7FEFF 		bl	Adafruit_ST7735_drawPixel
 1796              	.LVL170:
 1797 01f8 C6E7     		b	.L90
 1798              	.LVL171:
 1799              	.L103:
 341:Core/Src/graphics.c **** 			for (xx = 0; xx < w; xx++) {
 1800              		.loc 1 341 26 is_stmt 1 discriminator 2 view .LVU486
 1801 01fa 0BF1010C 		add	ip, fp, #1
 1802 01fe 5FFA8CFB 		uxtb	fp, ip
 1803              	.LVL172:
 1804              	.L88:
 341:Core/Src/graphics.c **** 			for (xx = 0; xx < w; xx++) {
 1805              		.loc 1 341 19 discriminator 1 view .LVU487
 1806 0202 099A     		ldr	r2, [sp, #36]
 1807 0204 9345     		cmp	fp, r2
 1808 0206 ACD2     		bcs	.L74
 342:Core/Src/graphics.c **** 				if (!(bit++ & 7)) {
 1809              		.loc 1 342 12 is_stmt 0 view .LVU488
 1810 0208 0024     		movs	r4, #0
 1811 020a C2E7     		b	.L93
 1812              	.L106:
 1813              		.align	2
 1814              	.L105:
 1815 020c 00000000 		.word	gfx_prop
 1816 0210 00000000 		.word	font
 1817              	.LBE9:
 1818              		.cfi_endproc
 1819              	.LFE158:
 1821              		.section	.text.graphics_write,"ax",%progbits
 1822              		.align	1
 1823              		.global	graphics_write
 1824              		.syntax unified
 1825              		.thumb
 1826              		.thumb_func
 1828              	graphics_write:
 1829              	.LVL173:
 1830              	.LFB160:
 359:Core/Src/graphics.c **** 
 360:Core/Src/graphics.c **** size_t graphics_drawText(char *s, uint16_t x, uint16_t y)
 361:Core/Src/graphics.c **** {
 362:Core/Src/graphics.c **** 	size_t i;
 363:Core/Src/graphics.c **** 
 364:Core/Src/graphics.c **** 	graphics_setCursor(x, y);
 365:Core/Src/graphics.c **** 	for (i=0;i<strlen(s);i++) {
 366:Core/Src/graphics.c **** 		graphics_write(s[i]);
 367:Core/Src/graphics.c **** 	}
 368:Core/Src/graphics.c **** 	return i;
 369:Core/Src/graphics.c **** }
 370:Core/Src/graphics.c **** 
 371:Core/Src/graphics.c **** size_t graphics_write(uint8_t c)
 372:Core/Src/graphics.c **** {
 1831              		.loc 1 372 1 is_stmt 1 view -0
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 0
 1834              		@ frame_needed = 0, uses_anonymous_args = 0
 1835              		.loc 1 372 1 is_stmt 0 view .LVU490
ARM GAS  /tmp/cczeTd9s.s 			page 43


 1836 0000 30B5     		push	{r4, r5, lr}
 1837              	.LCFI25:
 1838              		.cfi_def_cfa_offset 12
 1839              		.cfi_offset 4, -12
 1840              		.cfi_offset 5, -8
 1841              		.cfi_offset 14, -4
 1842 0002 83B0     		sub	sp, sp, #12
 1843              	.LCFI26:
 1844              		.cfi_def_cfa_offset 24
 1845 0004 0246     		mov	r2, r0
 373:Core/Src/graphics.c **** 	if (!gfx_prop.font) {	// 'Classic' built-in font
 1846              		.loc 1 373 2 is_stmt 1 view .LVU491
 1847              		.loc 1 373 15 is_stmt 0 view .LVU492
 1848 0006 434B     		ldr	r3, .L119
 1849 0008 5B69     		ldr	r3, [r3, #20]
 1850              		.loc 1 373 5 view .LVU493
 1851 000a 002B     		cmp	r3, #0
 1852 000c 40D0     		beq	.L116
 374:Core/Src/graphics.c **** 
 375:Core/Src/graphics.c **** 		if (c == '\n') {	// Newline?
 376:Core/Src/graphics.c **** 			gfx_prop.cursor_x = 0;	// Reset x to zero,
 377:Core/Src/graphics.c **** 			gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 378:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Ignore carriage returns
 379:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((gfx_prop.cursor_x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off ri
 380:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 381:Core/Src/graphics.c **** 				gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 382:Core/Src/graphics.c **** 			}
 383:Core/Src/graphics.c **** 			graphics_drawChar(gfx_prop.cursor_x, gfx_prop.cursor_y, c, gfx_prop.textcolor, gfx_prop.textbgco
 384:Core/Src/graphics.c **** 			gfx_prop.cursor_x += gfx_prop.textsize * 6;	// Advance x one char
 385:Core/Src/graphics.c **** 		}
 386:Core/Src/graphics.c **** 	} else {		// Custom font
 387:Core/Src/graphics.c **** 		if (c == '\n') {
 1853              		.loc 1 387 3 is_stmt 1 view .LVU494
 1854              		.loc 1 387 6 is_stmt 0 view .LVU495
 1855 000e 0A28     		cmp	r0, #10
 1856 0010 73D0     		beq	.L117
 388:Core/Src/graphics.c **** 			gfx_prop.cursor_x = 0;
 389:Core/Src/graphics.c **** 			gfx_prop.cursor_y += (int16_t) gfx_prop.textsize *(uint8_t) gfx_prop.font->yAdvance;
 390:Core/Src/graphics.c **** 		} else if (c != '\r') {
 1857              		.loc 1 390 10 is_stmt 1 view .LVU496
 1858              		.loc 1 390 13 is_stmt 0 view .LVU497
 1859 0012 0D28     		cmp	r0, #13
 1860 0014 7BD0     		beq	.L110
 1861              	.LBB10:
 391:Core/Src/graphics.c **** 			uint8_t first = gfx_prop.font->first;
 1862              		.loc 1 391 4 is_stmt 1 view .LVU498
 1863              		.loc 1 391 12 is_stmt 0 view .LVU499
 1864 0016 197A     		ldrb	r1, [r3, #8]	@ zero_extendqisi2
 1865              	.LVL174:
 392:Core/Src/graphics.c **** 			if ((c >= first) && (c <= (uint8_t) gfx_prop.font->last)) {
 1866              		.loc 1 392 4 is_stmt 1 view .LVU500
 1867              		.loc 1 392 7 is_stmt 0 view .LVU501
 1868 0018 8842     		cmp	r0, r1
 1869 001a 78D3     		bcc	.L110
 1870              		.loc 1 392 53 discriminator 1 view .LVU502
 1871 001c 587A     		ldrb	r0, [r3, #9]	@ zero_extendqisi2
 1872              	.LVL175:
ARM GAS  /tmp/cczeTd9s.s 			page 44


 1873              		.loc 1 392 21 discriminator 1 view .LVU503
 1874 001e 9042     		cmp	r0, r2
 1875 0020 75D3     		bcc	.L110
 1876              	.LBB11:
 393:Core/Src/graphics.c **** 				GFXglyph *glyph = &(((GFXglyph *) gfx_prop.font->glyph)[c - first]);
 1877              		.loc 1 393 5 is_stmt 1 view .LVU504
 1878              		.loc 1 393 52 is_stmt 0 view .LVU505
 1879 0022 5C68     		ldr	r4, [r3, #4]
 1880              		.loc 1 393 63 view .LVU506
 1881 0024 511A     		subs	r1, r2, r1
 1882              	.LVL176:
 1883              		.loc 1 393 15 view .LVU507
 1884 0026 04EBC104 		add	r4, r4, r1, lsl #3
 1885              	.LVL177:
 394:Core/Src/graphics.c **** 				uint8_t w = glyph->width, h = glyph->height;
 1886              		.loc 1 394 5 is_stmt 1 view .LVU508
 1887              		.loc 1 394 13 is_stmt 0 view .LVU509
 1888 002a A178     		ldrb	r1, [r4, #2]	@ zero_extendqisi2
 1889              	.LVL178:
 1890              		.loc 1 394 31 view .LVU510
 1891 002c E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1892              	.LVL179:
 395:Core/Src/graphics.c **** 				if ((w > 0) && (h > 0)) {	// Is there an associated bitmap?
 1893              		.loc 1 395 5 is_stmt 1 view .LVU511
 1894              		.loc 1 395 8 is_stmt 0 view .LVU512
 1895 002e 0029     		cmp	r1, #0
 1896 0030 18BF     		it	ne
 1897 0032 0028     		cmpne	r0, #0
 1898 0034 23D0     		beq	.L113
 1899              	.LBB12:
 396:Core/Src/graphics.c **** 					int16_t xo = (int8_t) glyph->xOffset;	// sic
 1900              		.loc 1 396 6 is_stmt 1 view .LVU513
 1901              		.loc 1 396 33 is_stmt 0 view .LVU514
 1902 0036 94F90500 		ldrsb	r0, [r4, #5]
 1903              	.LVL180:
 397:Core/Src/graphics.c **** 					if (gfx_prop.wrap && ((gfx_prop.cursor_x + gfx_prop.textsize * (xo + w)) > gfx_prop.width)) {
 1904              		.loc 1 397 6 is_stmt 1 view .LVU515
 1905              		.loc 1 397 18 is_stmt 0 view .LVU516
 1906 003a 364D     		ldr	r5, .L119
 1907 003c 2D7C     		ldrb	r5, [r5, #16]	@ zero_extendqisi2
 1908              		.loc 1 397 9 view .LVU517
 1909 003e 95B1     		cbz	r5, .L114
 1910              		.loc 1 397 37 discriminator 1 view .LVU518
 1911 0040 344D     		ldr	r5, .L119
 1912 0042 B5F806C0 		ldrh	ip, [r5, #6]
 1913              		.loc 1 397 57 discriminator 1 view .LVU519
 1914 0046 B5F80CE0 		ldrh	lr, [r5, #12]
 1915              		.loc 1 397 73 discriminator 1 view .LVU520
 1916 004a 0844     		add	r0, r0, r1
 1917              		.loc 1 397 47 discriminator 1 view .LVU521
 1918 004c 00FB0EC1 		mla	r1, r0, lr, ip
 1919              	.LVL181:
 1920              		.loc 1 397 89 discriminator 1 view .LVU522
 1921 0050 2888     		ldrh	r0, [r5]
 1922              		.loc 1 397 24 discriminator 1 view .LVU523
 1923 0052 8142     		cmp	r1, r0
 1924 0054 07DD     		ble	.L114
ARM GAS  /tmp/cczeTd9s.s 			page 45


 398:Core/Src/graphics.c **** 						gfx_prop.cursor_x = 0;
 1925              		.loc 1 398 7 is_stmt 1 view .LVU524
 1926              		.loc 1 398 25 is_stmt 0 view .LVU525
 1927 0056 0020     		movs	r0, #0
 1928 0058 E880     		strh	r0, [r5, #6]	@ movhi
 399:Core/Src/graphics.c **** 						gfx_prop.cursor_y += (int16_t) gfx_prop.textsize *(uint8_t) gfx_prop.font->yAdvance;
 1929              		.loc 1 399 7 is_stmt 1 view .LVU526
 1930              		.loc 1 399 15 is_stmt 0 view .LVU527
 1931 005a 2889     		ldrh	r0, [r5, #8]
 1932              		.loc 1 399 80 view .LVU528
 1933 005c 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1934              	.LVL182:
 1935              		.loc 1 399 25 view .LVU529
 1936 005e 13FB0EF3 		smulbb	r3, r3, lr
 1937 0062 0344     		add	r3, r3, r0
 1938 0064 2B81     		strh	r3, [r5, #8]	@ movhi
 1939              	.L114:
 400:Core/Src/graphics.c **** 					}
 401:Core/Src/graphics.c **** 					graphics_drawChar(gfx_prop.cursor_x, gfx_prop.cursor_y, c, gfx_prop.textcolor, gfx_prop.textbg
 1940              		.loc 1 401 6 is_stmt 1 view .LVU530
 1941              		.loc 1 401 32 is_stmt 0 view .LVU531
 1942 0066 2B48     		ldr	r0, .L119
 1943              		.loc 1 401 6 view .LVU532
 1944 0068 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 1945 006a 0193     		str	r3, [sp, #4]
 1946              	.LVL183:
 1947              		.loc 1 401 6 view .LVU533
 1948 006c C389     		ldrh	r3, [r0, #14]
 1949 006e 0093     		str	r3, [sp]
 1950 0070 4389     		ldrh	r3, [r0, #10]
 1951 0072 B0F90810 		ldrsh	r1, [r0, #8]
 1952 0076 B0F90600 		ldrsh	r0, [r0, #6]
 1953 007a FFF7FEFF 		bl	graphics_drawChar
 1954              	.LVL184:
 1955              	.L113:
 1956              		.loc 1 401 6 view .LVU534
 1957              	.LBE12:
 402:Core/Src/graphics.c **** 				}
 403:Core/Src/graphics.c **** 				gfx_prop.cursor_x += (uint8_t) glyph->xAdvance * (int16_t) gfx_prop.textsize;
 1958              		.loc 1 403 5 is_stmt 1 view .LVU535
 1959              		.loc 1 403 13 is_stmt 0 view .LVU536
 1960 007e 254B     		ldr	r3, .L119
 1961 0080 DA88     		ldrh	r2, [r3, #6]
 1962              		.loc 1 403 41 view .LVU537
 1963 0082 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 1964              		.loc 1 403 72 view .LVU538
 1965 0084 9889     		ldrh	r0, [r3, #12]
 1966              		.loc 1 403 23 view .LVU539
 1967 0086 11FB00F1 		smulbb	r1, r1, r0
 1968 008a 0A44     		add	r2, r2, r1
 1969 008c DA80     		strh	r2, [r3, #6]	@ movhi
 1970 008e 3EE0     		b	.L110
 1971              	.LVL185:
 1972              	.L116:
 1973              		.loc 1 403 23 view .LVU540
 1974              	.LBE11:
 1975              	.LBE10:
ARM GAS  /tmp/cczeTd9s.s 			page 46


 375:Core/Src/graphics.c **** 			gfx_prop.cursor_x = 0;	// Reset x to zero,
 1976              		.loc 1 375 3 is_stmt 1 view .LVU541
 375:Core/Src/graphics.c **** 			gfx_prop.cursor_x = 0;	// Reset x to zero,
 1977              		.loc 1 375 6 is_stmt 0 view .LVU542
 1978 0090 0A28     		cmp	r0, #10
 1979 0092 29D0     		beq	.L118
 378:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((gfx_prop.cursor_x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off ri
 1980              		.loc 1 378 10 is_stmt 1 view .LVU543
 378:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((gfx_prop.cursor_x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off ri
 1981              		.loc 1 378 13 is_stmt 0 view .LVU544
 1982 0094 0D28     		cmp	r0, #13
 1983 0096 3AD0     		beq	.L110
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1984              		.loc 1 379 4 is_stmt 1 view .LVU545
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1985              		.loc 1 379 16 is_stmt 0 view .LVU546
 1986 0098 1E4B     		ldr	r3, .L119
 1987 009a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1988              		.loc 1 379 7 view .LVU547
 1989 009c 83B1     		cbz	r3, .L111
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1990              		.loc 1 379 35 discriminator 1 view .LVU548
 1991 009e 1D49     		ldr	r1, .L119
 1992 00a0 CB88     		ldrh	r3, [r1, #6]
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1993              		.loc 1 379 55 discriminator 1 view .LVU549
 1994 00a2 8889     		ldrh	r0, [r1, #12]
 1995              	.LVL186:
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1996              		.loc 1 379 65 discriminator 1 view .LVU550
 1997 00a4 00EB4004 		add	r4, r0, r0, lsl #1
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 1998              		.loc 1 379 45 discriminator 1 view .LVU551
 1999 00a8 03EB4403 		add	r3, r3, r4, lsl #1
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 2000              		.loc 1 379 80 discriminator 1 view .LVU552
 2001 00ac 0988     		ldrh	r1, [r1]
 379:Core/Src/graphics.c **** 				gfx_prop.cursor_x = 0;	// Reset x to zero,
 2002              		.loc 1 379 22 discriminator 1 view .LVU553
 2003 00ae 8B42     		cmp	r3, r1
 2004 00b0 06DD     		ble	.L111
 380:Core/Src/graphics.c **** 				gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 2005              		.loc 1 380 5 is_stmt 1 view .LVU554
 380:Core/Src/graphics.c **** 				gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 2006              		.loc 1 380 23 is_stmt 0 view .LVU555
 2007 00b2 184B     		ldr	r3, .L119
 2008 00b4 0021     		movs	r1, #0
 2009 00b6 D980     		strh	r1, [r3, #6]	@ movhi
 381:Core/Src/graphics.c **** 			}
 2010              		.loc 1 381 5 is_stmt 1 view .LVU556
 381:Core/Src/graphics.c **** 			}
 2011              		.loc 1 381 13 is_stmt 0 view .LVU557
 2012 00b8 1989     		ldrh	r1, [r3, #8]
 381:Core/Src/graphics.c **** 			}
 2013              		.loc 1 381 23 view .LVU558
 2014 00ba 01EBC001 		add	r1, r1, r0, lsl #3
ARM GAS  /tmp/cczeTd9s.s 			page 47


 2015 00be 1981     		strh	r1, [r3, #8]	@ movhi
 2016              	.L111:
 383:Core/Src/graphics.c **** 			gfx_prop.cursor_x += gfx_prop.textsize * 6;	// Advance x one char
 2017              		.loc 1 383 4 is_stmt 1 view .LVU559
 383:Core/Src/graphics.c **** 			gfx_prop.cursor_x += gfx_prop.textsize * 6;	// Advance x one char
 2018              		.loc 1 383 30 is_stmt 0 view .LVU560
 2019 00c0 144C     		ldr	r4, .L119
 383:Core/Src/graphics.c **** 			gfx_prop.cursor_x += gfx_prop.textsize * 6;	// Advance x one char
 2020              		.loc 1 383 4 view .LVU561
 2021 00c2 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 2022 00c4 0193     		str	r3, [sp, #4]
 2023 00c6 E389     		ldrh	r3, [r4, #14]
 2024 00c8 0093     		str	r3, [sp]
 2025 00ca 6389     		ldrh	r3, [r4, #10]
 2026 00cc B4F90810 		ldrsh	r1, [r4, #8]
 2027 00d0 B4F90600 		ldrsh	r0, [r4, #6]
 2028 00d4 FFF7FEFF 		bl	graphics_drawChar
 2029              	.LVL187:
 384:Core/Src/graphics.c **** 		}
 2030              		.loc 1 384 4 is_stmt 1 view .LVU562
 384:Core/Src/graphics.c **** 		}
 2031              		.loc 1 384 12 is_stmt 0 view .LVU563
 2032 00d8 E288     		ldrh	r2, [r4, #6]
 384:Core/Src/graphics.c **** 		}
 2033              		.loc 1 384 33 view .LVU564
 2034 00da A389     		ldrh	r3, [r4, #12]
 384:Core/Src/graphics.c **** 		}
 2035              		.loc 1 384 22 view .LVU565
 2036 00dc 03EB4303 		add	r3, r3, r3, lsl #1
 2037 00e0 02EB4303 		add	r3, r2, r3, lsl #1
 2038 00e4 E380     		strh	r3, [r4, #6]	@ movhi
 2039 00e6 12E0     		b	.L110
 2040              	.LVL188:
 2041              	.L118:
 376:Core/Src/graphics.c **** 			gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 2042              		.loc 1 376 4 is_stmt 1 view .LVU566
 376:Core/Src/graphics.c **** 			gfx_prop.cursor_y += gfx_prop.textsize * 8;	// advance y one line
 2043              		.loc 1 376 22 is_stmt 0 view .LVU567
 2044 00e8 0A4B     		ldr	r3, .L119
 2045 00ea 0022     		movs	r2, #0
 2046 00ec DA80     		strh	r2, [r3, #6]	@ movhi
 377:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Ignore carriage returns
 2047              		.loc 1 377 4 is_stmt 1 view .LVU568
 377:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Ignore carriage returns
 2048              		.loc 1 377 12 is_stmt 0 view .LVU569
 2049 00ee 1A89     		ldrh	r2, [r3, #8]
 377:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Ignore carriage returns
 2050              		.loc 1 377 33 view .LVU570
 2051 00f0 9989     		ldrh	r1, [r3, #12]
 377:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Ignore carriage returns
 2052              		.loc 1 377 22 view .LVU571
 2053 00f2 02EBC102 		add	r2, r2, r1, lsl #3
 2054 00f6 1A81     		strh	r2, [r3, #8]	@ movhi
 2055 00f8 09E0     		b	.L110
 2056              	.L117:
 388:Core/Src/graphics.c **** 			gfx_prop.cursor_y += (int16_t) gfx_prop.textsize *(uint8_t) gfx_prop.font->yAdvance;
 2057              		.loc 1 388 4 is_stmt 1 view .LVU572
ARM GAS  /tmp/cczeTd9s.s 			page 48


 388:Core/Src/graphics.c **** 			gfx_prop.cursor_y += (int16_t) gfx_prop.textsize *(uint8_t) gfx_prop.font->yAdvance;
 2058              		.loc 1 388 22 is_stmt 0 view .LVU573
 2059 00fa 064A     		ldr	r2, .L119
 2060 00fc 0021     		movs	r1, #0
 2061 00fe D180     		strh	r1, [r2, #6]	@ movhi
 389:Core/Src/graphics.c **** 		} else if (c != '\r') {
 2062              		.loc 1 389 4 is_stmt 1 view .LVU574
 389:Core/Src/graphics.c **** 		} else if (c != '\r') {
 2063              		.loc 1 389 12 is_stmt 0 view .LVU575
 2064 0100 1189     		ldrh	r1, [r2, #8]
 389:Core/Src/graphics.c **** 		} else if (c != '\r') {
 2065              		.loc 1 389 43 view .LVU576
 2066 0102 9089     		ldrh	r0, [r2, #12]
 2067              	.LVL189:
 389:Core/Src/graphics.c **** 		} else if (c != '\r') {
 2068              		.loc 1 389 77 view .LVU577
 2069 0104 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 389:Core/Src/graphics.c **** 		} else if (c != '\r') {
 2070              		.loc 1 389 22 view .LVU578
 2071 0106 13FB00F3 		smulbb	r3, r3, r0
 2072 010a 0B44     		add	r3, r3, r1
 2073 010c 1381     		strh	r3, [r2, #8]	@ movhi
 2074              	.L110:
 404:Core/Src/graphics.c **** 			}
 405:Core/Src/graphics.c **** 		}
 406:Core/Src/graphics.c **** 
 407:Core/Src/graphics.c **** 	}
 408:Core/Src/graphics.c **** 	return 1;
 2075              		.loc 1 408 2 is_stmt 1 view .LVU579
 409:Core/Src/graphics.c **** }
 2076              		.loc 1 409 1 is_stmt 0 view .LVU580
 2077 010e 0120     		movs	r0, #1
 2078 0110 03B0     		add	sp, sp, #12
 2079              	.LCFI27:
 2080              		.cfi_def_cfa_offset 12
 2081              		@ sp needed
 2082 0112 30BD     		pop	{r4, r5, pc}
 2083              	.L120:
 2084              		.align	2
 2085              	.L119:
 2086 0114 00000000 		.word	gfx_prop
 2087              		.cfi_endproc
 2088              	.LFE160:
 2090              		.section	.text.graphics_setCursor,"ax",%progbits
 2091              		.align	1
 2092              		.global	graphics_setCursor
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2097              	graphics_setCursor:
 2098              	.LVL190:
 2099              	.LFB161:
 410:Core/Src/graphics.c **** 
 411:Core/Src/graphics.c **** void graphics_setCursor(int16_t x, int16_t y)
 412:Core/Src/graphics.c **** {
 2100              		.loc 1 412 1 is_stmt 1 view -0
 2101              		.cfi_startproc
ARM GAS  /tmp/cczeTd9s.s 			page 49


 2102              		@ args = 0, pretend = 0, frame = 0
 2103              		@ frame_needed = 0, uses_anonymous_args = 0
 2104              		@ link register save eliminated.
 413:Core/Src/graphics.c **** 	gfx_prop.cursor_x = x;
 2105              		.loc 1 413 2 view .LVU582
 2106              		.loc 1 413 20 is_stmt 0 view .LVU583
 2107 0000 014B     		ldr	r3, .L122
 2108 0002 D880     		strh	r0, [r3, #6]	@ movhi
 414:Core/Src/graphics.c **** 	gfx_prop.cursor_y = y;
 2109              		.loc 1 414 2 is_stmt 1 view .LVU584
 2110              		.loc 1 414 20 is_stmt 0 view .LVU585
 2111 0004 1981     		strh	r1, [r3, #8]	@ movhi
 415:Core/Src/graphics.c **** }
 2112              		.loc 1 415 1 view .LVU586
 2113 0006 7047     		bx	lr
 2114              	.L123:
 2115              		.align	2
 2116              	.L122:
 2117 0008 00000000 		.word	gfx_prop
 2118              		.cfi_endproc
 2119              	.LFE161:
 2121              		.section	.text.graphics_drawText,"ax",%progbits
 2122              		.align	1
 2123              		.global	graphics_drawText
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2128              	graphics_drawText:
 2129              	.LVL191:
 2130              	.LFB159:
 361:Core/Src/graphics.c **** 	size_t i;
 2131              		.loc 1 361 1 is_stmt 1 view -0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 0
 2134              		@ frame_needed = 0, uses_anonymous_args = 0
 361:Core/Src/graphics.c **** 	size_t i;
 2135              		.loc 1 361 1 is_stmt 0 view .LVU588
 2136 0000 38B5     		push	{r3, r4, r5, lr}
 2137              	.LCFI28:
 2138              		.cfi_def_cfa_offset 16
 2139              		.cfi_offset 3, -16
 2140              		.cfi_offset 4, -12
 2141              		.cfi_offset 5, -8
 2142              		.cfi_offset 14, -4
 2143 0002 0546     		mov	r5, r0
 2144 0004 0846     		mov	r0, r1
 2145              	.LVL192:
 362:Core/Src/graphics.c **** 
 2146              		.loc 1 362 2 is_stmt 1 view .LVU589
 364:Core/Src/graphics.c **** 	for (i=0;i<strlen(s);i++) {
 2147              		.loc 1 364 2 view .LVU590
 2148 0006 11B2     		sxth	r1, r2
 2149              	.LVL193:
 364:Core/Src/graphics.c **** 	for (i=0;i<strlen(s);i++) {
 2150              		.loc 1 364 2 is_stmt 0 view .LVU591
 2151 0008 00B2     		sxth	r0, r0
 2152 000a FFF7FEFF 		bl	graphics_setCursor
ARM GAS  /tmp/cczeTd9s.s 			page 50


 2153              	.LVL194:
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2154              		.loc 1 365 2 is_stmt 1 view .LVU592
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2155              		.loc 1 365 8 is_stmt 0 view .LVU593
 2156 000e 0024     		movs	r4, #0
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2157              		.loc 1 365 2 view .LVU594
 2158 0010 03E0     		b	.L125
 2159              	.LVL195:
 2160              	.L126:
 366:Core/Src/graphics.c **** 	}
 2161              		.loc 1 366 3 is_stmt 1 discriminator 3 view .LVU595
 2162 0012 285D     		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 2163 0014 FFF7FEFF 		bl	graphics_write
 2164              	.LVL196:
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2165              		.loc 1 365 24 discriminator 3 view .LVU596
 2166 0018 0134     		adds	r4, r4, #1
 2167              	.LVL197:
 2168              	.L125:
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2169              		.loc 1 365 12 discriminator 1 view .LVU597
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2170              		.loc 1 365 13 is_stmt 0 discriminator 1 view .LVU598
 2171 001a 2846     		mov	r0, r5
 2172 001c FFF7FEFF 		bl	strlen
 2173              	.LVL198:
 365:Core/Src/graphics.c **** 		graphics_write(s[i]);
 2174              		.loc 1 365 12 discriminator 1 view .LVU599
 2175 0020 A042     		cmp	r0, r4
 2176 0022 F6D8     		bhi	.L126
 368:Core/Src/graphics.c **** }
 2177              		.loc 1 368 2 is_stmt 1 view .LVU600
 369:Core/Src/graphics.c **** 
 2178              		.loc 1 369 1 is_stmt 0 view .LVU601
 2179 0024 2046     		mov	r0, r4
 2180 0026 38BD     		pop	{r3, r4, r5, pc}
 369:Core/Src/graphics.c **** 
 2181              		.loc 1 369 1 view .LVU602
 2182              		.cfi_endproc
 2183              	.LFE159:
 2185              		.section	.text.graphics_getCursorX,"ax",%progbits
 2186              		.align	1
 2187              		.global	graphics_getCursorX
 2188              		.syntax unified
 2189              		.thumb
 2190              		.thumb_func
 2192              	graphics_getCursorX:
 2193              	.LFB162:
 416:Core/Src/graphics.c **** 
 417:Core/Src/graphics.c **** int16_t graphics_getCursorX(void)
 418:Core/Src/graphics.c **** {
 2194              		.loc 1 418 1 is_stmt 1 view -0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 0
 2197              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cczeTd9s.s 			page 51


 2198              		@ link register save eliminated.
 419:Core/Src/graphics.c **** 	return gfx_prop.cursor_x;
 2199              		.loc 1 419 2 view .LVU604
 420:Core/Src/graphics.c **** }
 2200              		.loc 1 420 1 is_stmt 0 view .LVU605
 2201 0000 014B     		ldr	r3, .L129
 2202 0002 B3F90600 		ldrsh	r0, [r3, #6]
 2203 0006 7047     		bx	lr
 2204              	.L130:
 2205              		.align	2
 2206              	.L129:
 2207 0008 00000000 		.word	gfx_prop
 2208              		.cfi_endproc
 2209              	.LFE162:
 2211              		.section	.text.graphics_getCursorY,"ax",%progbits
 2212              		.align	1
 2213              		.global	graphics_getCursorY
 2214              		.syntax unified
 2215              		.thumb
 2216              		.thumb_func
 2218              	graphics_getCursorY:
 2219              	.LFB163:
 421:Core/Src/graphics.c **** 
 422:Core/Src/graphics.c **** int16_t graphics_getCursorY(void)
 423:Core/Src/graphics.c **** {
 2220              		.loc 1 423 1 is_stmt 1 view -0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 0
 2223              		@ frame_needed = 0, uses_anonymous_args = 0
 2224              		@ link register save eliminated.
 424:Core/Src/graphics.c **** 	return gfx_prop.cursor_y;
 2225              		.loc 1 424 2 view .LVU607
 425:Core/Src/graphics.c **** }
 2226              		.loc 1 425 1 is_stmt 0 view .LVU608
 2227 0000 014B     		ldr	r3, .L132
 2228 0002 B3F90800 		ldrsh	r0, [r3, #8]
 2229 0006 7047     		bx	lr
 2230              	.L133:
 2231              		.align	2
 2232              	.L132:
 2233 0008 00000000 		.word	gfx_prop
 2234              		.cfi_endproc
 2235              	.LFE163:
 2237              		.section	.text.graphics_setTextSize,"ax",%progbits
 2238              		.align	1
 2239              		.global	graphics_setTextSize
 2240              		.syntax unified
 2241              		.thumb
 2242              		.thumb_func
 2244              	graphics_setTextSize:
 2245              	.LVL199:
 2246              	.LFB164:
 426:Core/Src/graphics.c **** 
 427:Core/Src/graphics.c **** void graphics_setTextSize(uint8_t s)
 428:Core/Src/graphics.c **** {
 2247              		.loc 1 428 1 is_stmt 1 view -0
 2248              		.cfi_startproc
ARM GAS  /tmp/cczeTd9s.s 			page 52


 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              		@ link register save eliminated.
 429:Core/Src/graphics.c **** 	gfx_prop.textsize = (s > 0) ? s : 1;
 2252              		.loc 1 429 2 view .LVU610
 2253              		.loc 1 429 20 is_stmt 0 view .LVU611
 2254 0000 0346     		mov	r3, r0
 2255 0002 00B9     		cbnz	r0, .L135
 2256 0004 0123     		movs	r3, #1
 2257              	.L135:
 2258              		.loc 1 429 20 discriminator 4 view .LVU612
 2259 0006 014A     		ldr	r2, .L137
 2260 0008 9381     		strh	r3, [r2, #12]	@ movhi
 430:Core/Src/graphics.c **** }
 2261              		.loc 1 430 1 discriminator 4 view .LVU613
 2262 000a 7047     		bx	lr
 2263              	.L138:
 2264              		.align	2
 2265              	.L137:
 2266 000c 00000000 		.word	gfx_prop
 2267              		.cfi_endproc
 2268              	.LFE164:
 2270              		.section	.text.graphics_setTextColor,"ax",%progbits
 2271              		.align	1
 2272              		.global	graphics_setTextColor
 2273              		.syntax unified
 2274              		.thumb
 2275              		.thumb_func
 2277              	graphics_setTextColor:
 2278              	.LVL200:
 2279              	.LFB165:
 431:Core/Src/graphics.c **** 
 432:Core/Src/graphics.c **** void graphics_setTextColor(uint16_t c)
 433:Core/Src/graphics.c **** {
 2280              		.loc 1 433 1 is_stmt 1 view -0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 0, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 434:Core/Src/graphics.c **** 	// For 'transparent' background, we'll set the bg
 435:Core/Src/graphics.c **** 	// to the same as fg instead of using a flag
 436:Core/Src/graphics.c **** 	gfx_prop.textcolor = gfx_prop.textbgcolor = c;
 2285              		.loc 1 436 2 view .LVU615
 2286              		.loc 1 436 44 is_stmt 0 view .LVU616
 2287 0000 014B     		ldr	r3, .L140
 2288 0002 D881     		strh	r0, [r3, #14]	@ movhi
 2289              		.loc 1 436 21 view .LVU617
 2290 0004 5881     		strh	r0, [r3, #10]	@ movhi
 437:Core/Src/graphics.c **** }
 2291              		.loc 1 437 1 view .LVU618
 2292 0006 7047     		bx	lr
 2293              	.L141:
 2294              		.align	2
 2295              	.L140:
 2296 0008 00000000 		.word	gfx_prop
 2297              		.cfi_endproc
 2298              	.LFE165:
ARM GAS  /tmp/cczeTd9s.s 			page 53


 2300              		.section	.text.graphics_setTextColor2,"ax",%progbits
 2301              		.align	1
 2302              		.global	graphics_setTextColor2
 2303              		.syntax unified
 2304              		.thumb
 2305              		.thumb_func
 2307              	graphics_setTextColor2:
 2308              	.LVL201:
 2309              	.LFB166:
 438:Core/Src/graphics.c **** 
 439:Core/Src/graphics.c **** void graphics_setTextColor2(uint16_t c, uint16_t b)
 440:Core/Src/graphics.c **** {
 2310              		.loc 1 440 1 is_stmt 1 view -0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 2314              		@ link register save eliminated.
 441:Core/Src/graphics.c **** 	gfx_prop.textcolor = c;
 2315              		.loc 1 441 2 view .LVU620
 2316              		.loc 1 441 21 is_stmt 0 view .LVU621
 2317 0000 014B     		ldr	r3, .L143
 2318 0002 5881     		strh	r0, [r3, #10]	@ movhi
 442:Core/Src/graphics.c **** 	gfx_prop.textbgcolor = b;
 2319              		.loc 1 442 2 is_stmt 1 view .LVU622
 2320              		.loc 1 442 23 is_stmt 0 view .LVU623
 2321 0004 D981     		strh	r1, [r3, #14]	@ movhi
 443:Core/Src/graphics.c **** }
 2322              		.loc 1 443 1 view .LVU624
 2323 0006 7047     		bx	lr
 2324              	.L144:
 2325              		.align	2
 2326              	.L143:
 2327 0008 00000000 		.word	gfx_prop
 2328              		.cfi_endproc
 2329              	.LFE166:
 2331              		.section	.text.graphics_setTextWrap,"ax",%progbits
 2332              		.align	1
 2333              		.global	graphics_setTextWrap
 2334              		.syntax unified
 2335              		.thumb
 2336              		.thumb_func
 2338              	graphics_setTextWrap:
 2339              	.LVL202:
 2340              	.LFB167:
 444:Core/Src/graphics.c **** 
 445:Core/Src/graphics.c **** void graphics_setTextWrap(bool w)
 446:Core/Src/graphics.c **** {
 2341              		.loc 1 446 1 is_stmt 1 view -0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
 2345              		@ link register save eliminated.
 447:Core/Src/graphics.c **** 	gfx_prop.wrap = w;
 2346              		.loc 1 447 2 view .LVU626
 2347              		.loc 1 447 16 is_stmt 0 view .LVU627
 2348 0000 014B     		ldr	r3, .L146
 2349 0002 1874     		strb	r0, [r3, #16]
ARM GAS  /tmp/cczeTd9s.s 			page 54


 448:Core/Src/graphics.c **** }
 2350              		.loc 1 448 1 view .LVU628
 2351 0004 7047     		bx	lr
 2352              	.L147:
 2353 0006 00BF     		.align	2
 2354              	.L146:
 2355 0008 00000000 		.word	gfx_prop
 2356              		.cfi_endproc
 2357              	.LFE167:
 2359              		.section	.text.graphics_getRotation,"ax",%progbits
 2360              		.align	1
 2361              		.global	graphics_getRotation
 2362              		.syntax unified
 2363              		.thumb
 2364              		.thumb_func
 2366              	graphics_getRotation:
 2367              	.LFB168:
 449:Core/Src/graphics.c **** 
 450:Core/Src/graphics.c **** uint8_t graphics_getRotation(void)
 451:Core/Src/graphics.c **** {
 2368              		.loc 1 451 1 is_stmt 1 view -0
 2369              		.cfi_startproc
 2370              		@ args = 0, pretend = 0, frame = 0
 2371              		@ frame_needed = 0, uses_anonymous_args = 0
 2372              		@ link register save eliminated.
 452:Core/Src/graphics.c **** 	return gfx_prop.rotation;
 2373              		.loc 1 452 2 view .LVU630
 453:Core/Src/graphics.c **** }
 2374              		.loc 1 453 1 is_stmt 0 view .LVU631
 2375 0000 014B     		ldr	r3, .L149
 2376 0002 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 2377 0004 7047     		bx	lr
 2378              	.L150:
 2379 0006 00BF     		.align	2
 2380              	.L149:
 2381 0008 00000000 		.word	gfx_prop
 2382              		.cfi_endproc
 2383              	.LFE168:
 2385              		.section	.text.graphics_setRotation,"ax",%progbits
 2386              		.align	1
 2387              		.global	graphics_setRotation
 2388              		.syntax unified
 2389              		.thumb
 2390              		.thumb_func
 2392              	graphics_setRotation:
 2393              	.LVL203:
 2394              	.LFB169:
 454:Core/Src/graphics.c **** 
 455:Core/Src/graphics.c **** void graphics_setRotation(uint8_t x)
 456:Core/Src/graphics.c **** {
 2395              		.loc 1 456 1 is_stmt 1 view -0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              		@ link register save eliminated.
 457:Core/Src/graphics.c **** 	gfx_prop.rotation = (x & 3);
 2400              		.loc 1 457 2 view .LVU633
ARM GAS  /tmp/cczeTd9s.s 			page 55


 2401              		.loc 1 457 25 is_stmt 0 view .LVU634
 2402 0000 00F00300 		and	r0, r0, #3
 2403              	.LVL204:
 2404              		.loc 1 457 20 view .LVU635
 2405 0004 094B     		ldr	r3, .L157
 2406 0006 9880     		strh	r0, [r3, #4]	@ movhi
 458:Core/Src/graphics.c **** 	switch (gfx_prop.rotation) {
 2407              		.loc 1 458 2 is_stmt 1 view .LVU636
 2408 0008 0328     		cmp	r0, #3
 2409 000a 0ED8     		bhi	.L151
 2410 000c DFE800F0 		tbb	[pc, r0]
 2411              	.L154:
 2412 0010 02       		.byte	(.L155-.L154)/2
 2413 0011 08       		.byte	(.L153-.L154)/2
 2414 0012 02       		.byte	(.L155-.L154)/2
 2415 0013 08       		.byte	(.L153-.L154)/2
 2416              		.p2align 1
 2417              	.L155:
 459:Core/Src/graphics.c **** 	case 0:
 460:Core/Src/graphics.c **** 	case 2:
 461:Core/Src/graphics.c **** 		gfx_prop.width = WIDTH;
 2418              		.loc 1 461 3 view .LVU637
 2419              		.loc 1 461 18 is_stmt 0 view .LVU638
 2420 0014 054B     		ldr	r3, .L157
 2421 0016 8022     		movs	r2, #128
 2422 0018 1A80     		strh	r2, [r3]	@ movhi
 462:Core/Src/graphics.c **** 		gfx_prop.height = HEIGHT;
 2423              		.loc 1 462 3 is_stmt 1 view .LVU639
 2424              		.loc 1 462 19 is_stmt 0 view .LVU640
 2425 001a A022     		movs	r2, #160
 2426 001c 5A80     		strh	r2, [r3, #2]	@ movhi
 463:Core/Src/graphics.c **** 		break;
 2427              		.loc 1 463 3 is_stmt 1 view .LVU641
 2428 001e 7047     		bx	lr
 2429              	.L153:
 464:Core/Src/graphics.c **** 	case 1:
 465:Core/Src/graphics.c **** 	case 3:
 466:Core/Src/graphics.c **** 		gfx_prop.width = HEIGHT;
 2430              		.loc 1 466 3 view .LVU642
 2431              		.loc 1 466 18 is_stmt 0 view .LVU643
 2432 0020 024B     		ldr	r3, .L157
 2433 0022 A022     		movs	r2, #160
 2434 0024 1A80     		strh	r2, [r3]	@ movhi
 467:Core/Src/graphics.c **** 		gfx_prop.height = WIDTH;
 2435              		.loc 1 467 3 is_stmt 1 view .LVU644
 2436              		.loc 1 467 19 is_stmt 0 view .LVU645
 2437 0026 8022     		movs	r2, #128
 2438 0028 5A80     		strh	r2, [r3, #2]	@ movhi
 468:Core/Src/graphics.c **** 		break;
 2439              		.loc 1 468 3 is_stmt 1 view .LVU646
 2440              	.L151:
 469:Core/Src/graphics.c **** 	}
 470:Core/Src/graphics.c **** }
 2441              		.loc 1 470 1 is_stmt 0 view .LVU647
 2442 002a 7047     		bx	lr
 2443              	.L158:
 2444              		.align	2
ARM GAS  /tmp/cczeTd9s.s 			page 56


 2445              	.L157:
 2446 002c 00000000 		.word	gfx_prop
 2447              		.cfi_endproc
 2448              	.LFE169:
 2450              		.section	.text.graphics_cp437,"ax",%progbits
 2451              		.align	1
 2452              		.global	graphics_cp437
 2453              		.syntax unified
 2454              		.thumb
 2455              		.thumb_func
 2457              	graphics_cp437:
 2458              	.LVL205:
 2459              	.LFB170:
 471:Core/Src/graphics.c **** 
 472:Core/Src/graphics.c **** // Enable (or disable) Code Page 437-compatible charset.
 473:Core/Src/graphics.c **** // There was an error in glcdfont.c for the longest time -- one character
 474:Core/Src/graphics.c **** // (#176, the 'light shade' block) was missing -- this threw off the index
 475:Core/Src/graphics.c **** // of every character that followed it.  But a TON of code has been written
 476:Core/Src/graphics.c **** // with the erroneous character indices.  By default, the library uses the
 477:Core/Src/graphics.c **** // original 'wrong' behavior and old sketches will still work.  Pass 'true'
 478:Core/Src/graphics.c **** // to this function to use correct CP437 character values in your code.
 479:Core/Src/graphics.c **** void graphics_cp437(bool x)
 480:Core/Src/graphics.c **** {
 2460              		.loc 1 480 1 is_stmt 1 view -0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 481:Core/Src/graphics.c **** 	gfx_prop.cp437 = x;
 2465              		.loc 1 481 2 view .LVU649
 2466              		.loc 1 481 17 is_stmt 0 view .LVU650
 2467 0000 014B     		ldr	r3, .L160
 2468 0002 1876     		strb	r0, [r3, #24]
 482:Core/Src/graphics.c **** }
 2469              		.loc 1 482 1 view .LVU651
 2470 0004 7047     		bx	lr
 2471              	.L161:
 2472 0006 00BF     		.align	2
 2473              	.L160:
 2474 0008 00000000 		.word	gfx_prop
 2475              		.cfi_endproc
 2476              	.LFE170:
 2478              		.section	.text.graphics_setFont,"ax",%progbits
 2479              		.align	1
 2480              		.global	graphics_setFont
 2481              		.syntax unified
 2482              		.thumb
 2483              		.thumb_func
 2485              	graphics_setFont:
 2486              	.LVL206:
 2487              	.LFB171:
 483:Core/Src/graphics.c **** 
 484:Core/Src/graphics.c **** void graphics_setFont(const GFXfont *f)
 485:Core/Src/graphics.c **** {
 2488              		.loc 1 485 1 is_stmt 1 view -0
 2489              		.cfi_startproc
 2490              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cczeTd9s.s 			page 57


 2491              		@ frame_needed = 0, uses_anonymous_args = 0
 2492              		@ link register save eliminated.
 486:Core/Src/graphics.c **** 	if (f) {		// Font struct pointer passed in?
 2493              		.loc 1 486 2 view .LVU653
 2494              		.loc 1 486 5 is_stmt 0 view .LVU654
 2495 0000 0246     		mov	r2, r0
 2496 0002 50B1     		cbz	r0, .L163
 487:Core/Src/graphics.c **** 		if (!gfx_prop.font) {	// And no current font struct?
 2497              		.loc 1 487 3 is_stmt 1 view .LVU655
 2498              		.loc 1 487 16 is_stmt 0 view .LVU656
 2499 0004 094B     		ldr	r3, .L166
 2500 0006 5B69     		ldr	r3, [r3, #20]
 2501              		.loc 1 487 6 view .LVU657
 2502 0008 13B1     		cbz	r3, .L165
 2503              	.L164:
 488:Core/Src/graphics.c **** 			// Switching from classic to new font behavior.
 489:Core/Src/graphics.c **** 			// Move cursor pos down 6 pixels so it's on baseline.
 490:Core/Src/graphics.c **** 			gfx_prop.cursor_y += 6;
 491:Core/Src/graphics.c **** 		}
 492:Core/Src/graphics.c **** 	} else if (gfx_prop.font) {	// NULL passed.  Current font struct defined?
 493:Core/Src/graphics.c **** 		// Switching from new to classic font behavior.
 494:Core/Src/graphics.c **** 		// Move cursor pos up 6 pixels so it's at top-left of char.
 495:Core/Src/graphics.c **** 		gfx_prop.cursor_y -= 6;
 496:Core/Src/graphics.c **** 	}
 497:Core/Src/graphics.c **** 	gfx_prop.font = (GFXfont *) f;
 2504              		.loc 1 497 2 is_stmt 1 view .LVU658
 2505              		.loc 1 497 16 is_stmt 0 view .LVU659
 2506 000a 084B     		ldr	r3, .L166
 2507 000c 5A61     		str	r2, [r3, #20]
 498:Core/Src/graphics.c **** }
 2508              		.loc 1 498 1 view .LVU660
 2509 000e 7047     		bx	lr
 2510              	.L165:
 490:Core/Src/graphics.c **** 		}
 2511              		.loc 1 490 4 is_stmt 1 view .LVU661
 490:Core/Src/graphics.c **** 		}
 2512              		.loc 1 490 12 is_stmt 0 view .LVU662
 2513 0010 0649     		ldr	r1, .L166
 2514 0012 0B89     		ldrh	r3, [r1, #8]
 490:Core/Src/graphics.c **** 		}
 2515              		.loc 1 490 22 view .LVU663
 2516 0014 0633     		adds	r3, r3, #6
 2517 0016 0B81     		strh	r3, [r1, #8]	@ movhi
 2518 0018 F7E7     		b	.L164
 2519              	.L163:
 492:Core/Src/graphics.c **** 		// Switching from new to classic font behavior.
 2520              		.loc 1 492 9 is_stmt 1 view .LVU664
 492:Core/Src/graphics.c **** 		// Switching from new to classic font behavior.
 2521              		.loc 1 492 21 is_stmt 0 view .LVU665
 2522 001a 044B     		ldr	r3, .L166
 2523 001c 5B69     		ldr	r3, [r3, #20]
 492:Core/Src/graphics.c **** 		// Switching from new to classic font behavior.
 2524              		.loc 1 492 12 view .LVU666
 2525 001e 002B     		cmp	r3, #0
 2526 0020 F3D0     		beq	.L164
 495:Core/Src/graphics.c **** 	}
 2527              		.loc 1 495 3 is_stmt 1 view .LVU667
ARM GAS  /tmp/cczeTd9s.s 			page 58


 495:Core/Src/graphics.c **** 	}
 2528              		.loc 1 495 11 is_stmt 0 view .LVU668
 2529 0022 0249     		ldr	r1, .L166
 2530 0024 0B89     		ldrh	r3, [r1, #8]
 495:Core/Src/graphics.c **** 	}
 2531              		.loc 1 495 21 view .LVU669
 2532 0026 063B     		subs	r3, r3, #6
 2533 0028 0B81     		strh	r3, [r1, #8]	@ movhi
 2534 002a EEE7     		b	.L164
 2535              	.L167:
 2536              		.align	2
 2537              	.L166:
 2538 002c 00000000 		.word	gfx_prop
 2539              		.cfi_endproc
 2540              	.LFE171:
 2542              		.section	.text.graphics_charBounds,"ax",%progbits
 2543              		.align	1
 2544              		.global	graphics_charBounds
 2545              		.syntax unified
 2546              		.thumb
 2547              		.thumb_func
 2549              	graphics_charBounds:
 2550              	.LVL207:
 2551              	.LFB172:
 499:Core/Src/graphics.c **** 
 500:Core/Src/graphics.c **** // Broke this out as it's used by both the PROGMEM- and RAM-resident
 501:Core/Src/graphics.c **** // getTextBounds() functions.
 502:Core/Src/graphics.c **** void graphics_charBounds(char c, int16_t *x, int16_t *y, int16_t *minx, int16_t *miny, int16_t *max
 503:Core/Src/graphics.c **** {
 2552              		.loc 1 503 1 is_stmt 1 view -0
 2553              		.cfi_startproc
 2554              		@ args = 12, pretend = 0, frame = 0
 2555              		@ frame_needed = 0, uses_anonymous_args = 0
 2556              		.loc 1 503 1 is_stmt 0 view .LVU671
 2557 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2558              	.LCFI29:
 2559              		.cfi_def_cfa_offset 32
 2560              		.cfi_offset 4, -32
 2561              		.cfi_offset 5, -28
 2562              		.cfi_offset 6, -24
 2563              		.cfi_offset 7, -20
 2564              		.cfi_offset 8, -16
 2565              		.cfi_offset 9, -12
 2566              		.cfi_offset 10, -8
 2567              		.cfi_offset 14, -4
 504:Core/Src/graphics.c **** 
 505:Core/Src/graphics.c **** 	if (gfx_prop.font) {
 2568              		.loc 1 505 2 is_stmt 1 view .LVU672
 2569              		.loc 1 505 14 is_stmt 0 view .LVU673
 2570 0004 6F4C     		ldr	r4, .L186
 2571 0006 6469     		ldr	r4, [r4, #20]
 2572              		.loc 1 505 5 view .LVU674
 2573 0008 002C     		cmp	r4, #0
 2574 000a 00F08680 		beq	.L169
 506:Core/Src/graphics.c **** 
 507:Core/Src/graphics.c **** 		if (c == '\n') {	// Newline?
 2575              		.loc 1 507 3 is_stmt 1 view .LVU675
ARM GAS  /tmp/cczeTd9s.s 			page 59


 2576              		.loc 1 507 6 is_stmt 0 view .LVU676
 2577 000e 0A28     		cmp	r0, #10
 2578 0010 76D0     		beq	.L184
 508:Core/Src/graphics.c **** 			*x = 0;	// Reset x to zero, advance y by one line
 509:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * (uint8_t) gfx_prop.font->yAdvance;
 510:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2579              		.loc 1 510 10 is_stmt 1 view .LVU677
 2580              		.loc 1 510 13 is_stmt 0 view .LVU678
 2581 0012 0D28     		cmp	r0, #13
 2582 0014 7FD0     		beq	.L168
 2583              	.LBB13:
 511:Core/Src/graphics.c **** 			uint8_t first = gfx_prop.font->first;
 2584              		.loc 1 511 4 is_stmt 1 view .LVU679
 2585              		.loc 1 511 12 is_stmt 0 view .LVU680
 2586 0016 257A     		ldrb	r5, [r4, #8]	@ zero_extendqisi2
 2587              	.LVL208:
 512:Core/Src/graphics.c **** 			uint8_t last = gfx_prop.font->last;
 2588              		.loc 1 512 4 is_stmt 1 view .LVU681
 2589              		.loc 1 512 12 is_stmt 0 view .LVU682
 2590 0018 677A     		ldrb	r7, [r4, #9]	@ zero_extendqisi2
 2591              	.LVL209:
 513:Core/Src/graphics.c **** 			if ((c >= first) && (c <= last)) {	// Char present in this font?
 2592              		.loc 1 513 4 is_stmt 1 view .LVU683
 2593              		.loc 1 513 21 is_stmt 0 view .LVU684
 2594 001a A842     		cmp	r0, r5
 2595 001c 34BF     		ite	cc
 2596 001e 0026     		movcc	r6, #0
 2597 0020 0126     		movcs	r6, #1
 2598 0022 B842     		cmp	r0, r7
 2599 0024 88BF     		it	hi
 2600 0026 0026     		movhi	r6, #0
 2601              		.loc 1 513 7 view .LVU685
 2602 0028 002E     		cmp	r6, #0
 2603 002a 74D0     		beq	.L168
 2604              	.LBB14:
 514:Core/Src/graphics.c **** 				GFXglyph *glyph = &(((GFXglyph *) (&gfx_prop.font->glyph))[c - first]);
 2605              		.loc 1 514 5 is_stmt 1 view .LVU686
 2606              		.loc 1 514 40 is_stmt 0 view .LVU687
 2607 002c 04F1040C 		add	ip, r4, #4
 2608              		.loc 1 514 66 view .LVU688
 2609 0030 451B     		subs	r5, r0, r5
 2610              	.LVL210:
 2611              		.loc 1 514 15 view .LVU689
 2612 0032 0CEBC50C 		add	ip, ip, r5, lsl #3
 2613              	.LVL211:
 515:Core/Src/graphics.c **** 				uint8_t gw = glyph->width;
 2614              		.loc 1 515 5 is_stmt 1 view .LVU690
 2615              		.loc 1 515 13 is_stmt 0 view .LVU691
 2616 0036 9CF80280 		ldrb	r8, [ip, #2]	@ zero_extendqisi2
 2617              	.LVL212:
 516:Core/Src/graphics.c **** 				uint8_t gh = glyph->height;
 2618              		.loc 1 516 5 is_stmt 1 view .LVU692
 2619              		.loc 1 516 13 is_stmt 0 view .LVU693
 2620 003a 9CF80360 		ldrb	r6, [ip, #3]	@ zero_extendqisi2
 2621              	.LVL213:
 517:Core/Src/graphics.c **** 				uint8_t xa = glyph->xAdvance;
 2622              		.loc 1 517 5 is_stmt 1 view .LVU694
ARM GAS  /tmp/cczeTd9s.s 			page 60


 2623              		.loc 1 517 13 is_stmt 0 view .LVU695
 2624 003e 9CF804E0 		ldrb	lr, [ip, #4]	@ zero_extendqisi2
 2625              	.LVL214:
 518:Core/Src/graphics.c **** 				int8_t xo = glyph->xOffset;
 2626              		.loc 1 518 5 is_stmt 1 view .LVU696
 2627              		.loc 1 518 12 is_stmt 0 view .LVU697
 2628 0042 9CF90500 		ldrsb	r0, [ip, #5]
 2629              	.LVL215:
 519:Core/Src/graphics.c **** 				int8_t yo = glyph->yOffset;
 2630              		.loc 1 519 5 is_stmt 1 view .LVU698
 2631              		.loc 1 519 12 is_stmt 0 view .LVU699
 2632 0046 9CF90670 		ldrsb	r7, [ip, #6]
 2633              	.LVL216:
 520:Core/Src/graphics.c **** 				if (gfx_prop.wrap && ((*x + (((int16_t) xo + gw) * gfx_prop.textsize)) > gfx_prop.width)) {
 2634              		.loc 1 520 5 is_stmt 1 view .LVU700
 2635              		.loc 1 520 17 is_stmt 0 view .LVU701
 2636 004a 5E4D     		ldr	r5, .L186
 2637 004c 2D7C     		ldrb	r5, [r5, #16]	@ zero_extendqisi2
 2638              		.loc 1 520 8 view .LVU702
 2639 004e CDB1     		cbz	r5, .L172
 2640              		.loc 1 520 28 discriminator 1 view .LVU703
 2641 0050 B1F900C0 		ldrsh	ip, [r1]
 2642              	.LVL217:
 2643              		.loc 1 520 48 discriminator 1 view .LVU704
 2644 0054 08EB0009 		add	r9, r8, r0
 2645              		.loc 1 520 64 discriminator 1 view .LVU705
 2646 0058 DFF868A1 		ldr	r10, .L186
 2647 005c BAF80C50 		ldrh	r5, [r10, #12]
 2648              		.loc 1 520 31 discriminator 1 view .LVU706
 2649 0060 05FB09CC 		mla	ip, r5, r9, ip
 2650              		.loc 1 520 86 discriminator 1 view .LVU707
 2651 0064 BAF80090 		ldrh	r9, [r10]
 2652              		.loc 1 520 23 discriminator 1 view .LVU708
 2653 0068 CC45     		cmp	ip, r9
 2654 006a 0BDD     		ble	.L172
 521:Core/Src/graphics.c **** 					*x = 0;	// Reset x to zero, advance y by one line
 2655              		.loc 1 521 6 is_stmt 1 view .LVU709
 2656              		.loc 1 521 9 is_stmt 0 view .LVU710
 2657 006c 4FF0000C 		mov	ip, #0
 2658 0070 A1F800C0 		strh	ip, [r1]	@ movhi
 2659              	.LVL218:
 522:Core/Src/graphics.c **** 					*y += gfx_prop.textsize * (uint8_t) gfx_prop.font->yAdvance;
 2660              		.loc 1 522 6 is_stmt 1 view .LVU711
 2661 0074 B2F800C0 		ldrh	ip, [r2]
 2662              		.loc 1 522 55 is_stmt 0 view .LVU712
 2663 0078 A47A     		ldrb	r4, [r4, #10]	@ zero_extendqisi2
 2664              		.loc 1 522 30 view .LVU713
 2665 007a 15FB04F5 		smulbb	r5, r5, r4
 2666              		.loc 1 522 9 view .LVU714
 2667 007e 1CFA85F5 		uxtah	r5, ip, r5
 2668 0082 1580     		strh	r5, [r2]	@ movhi
 2669              	.L172:
 523:Core/Src/graphics.c **** 				}
 524:Core/Src/graphics.c **** 				int16_t ts = (int16_t) gfx_prop.textsize, x1 = *x + xo * ts, y1 = *y + yo * ts, x2 = x1 + gw * 
 2670              		.loc 1 524 5 is_stmt 1 view .LVU715
 2671              		.loc 1 524 36 is_stmt 0 view .LVU716
 2672 0084 4F4C     		ldr	r4, .L186
ARM GAS  /tmp/cczeTd9s.s 			page 61


 2673 0086 A489     		ldrh	r4, [r4, #12]
 2674              	.LVL219:
 2675              		.loc 1 524 52 view .LVU717
 2676 0088 0D88     		ldrh	r5, [r1]
 2677              		.loc 1 524 60 view .LVU718
 2678 008a 10FB04F0 		smulbb	r0, r0, r4
 2679              	.LVL220:
 2680              		.loc 1 524 55 view .LVU719
 2681 008e 15FA80F0 		uxtah	r0, r5, r0
 2682              		.loc 1 524 47 view .LVU720
 2683 0092 0FFA80FC 		sxth	ip, r0
 2684              	.LVL221:
 2685              		.loc 1 524 71 view .LVU721
 2686 0096 1288     		ldrh	r2, [r2]
 2687              	.LVL222:
 2688              		.loc 1 524 79 view .LVU722
 2689 0098 17FB04F7 		smulbb	r7, r7, r4
 2690              	.LVL223:
 2691              		.loc 1 524 74 view .LVU723
 2692 009c 12FA87F7 		uxtah	r7, r2, r7
 2693              		.loc 1 524 66 view .LVU724
 2694 00a0 3DB2     		sxth	r5, r7
 2695              	.LVL224:
 2696              		.loc 1 524 93 view .LVU725
 2697 00a2 18FB04F2 		smulbb	r2, r8, r4
 2698 00a6 12FA80F2 		uxtah	r2, r2, r0
 2699 00aa 92B2     		uxth	r2, r2
 2700              		.loc 1 524 103 view .LVU726
 2701 00ac 013A     		subs	r2, r2, #1
 2702              		.loc 1 524 85 view .LVU727
 2703 00ae 12B2     		sxth	r2, r2
 2704              	.LVL225:
 2705              		.loc 1 524 116 view .LVU728
 2706 00b0 16FB04F6 		smulbb	r6, r6, r4
 2707              	.LVL226:
 2708              		.loc 1 524 116 view .LVU729
 2709 00b4 16FA87F0 		uxtah	r0, r6, r7
 2710 00b8 80B2     		uxth	r0, r0
 2711              		.loc 1 524 126 view .LVU730
 2712 00ba 0138     		subs	r0, r0, #1
 2713              		.loc 1 524 108 view .LVU731
 2714 00bc 00B2     		sxth	r0, r0
 2715              	.LVL227:
 525:Core/Src/graphics.c **** 				if (x1 < *minx)
 2716              		.loc 1 525 5 is_stmt 1 view .LVU732
 2717              		.loc 1 525 14 is_stmt 0 view .LVU733
 2718 00be B3F90060 		ldrsh	r6, [r3]
 2719              		.loc 1 525 8 view .LVU734
 2720 00c2 6645     		cmp	r6, ip
 2721 00c4 01DD     		ble	.L173
 526:Core/Src/graphics.c **** 					*minx = x1;
 2722              		.loc 1 526 6 is_stmt 1 view .LVU735
 2723              		.loc 1 526 12 is_stmt 0 view .LVU736
 2724 00c6 A3F800C0 		strh	ip, [r3]	@ movhi
 2725              	.L173:
 527:Core/Src/graphics.c **** 				if (y1 < *miny)
 2726              		.loc 1 527 5 is_stmt 1 view .LVU737
ARM GAS  /tmp/cczeTd9s.s 			page 62


 2727              		.loc 1 527 14 is_stmt 0 view .LVU738
 2728 00ca 089B     		ldr	r3, [sp, #32]
 2729              	.LVL228:
 2730              		.loc 1 527 14 view .LVU739
 2731 00cc B3F90030 		ldrsh	r3, [r3]
 2732              		.loc 1 527 8 view .LVU740
 2733 00d0 AB42     		cmp	r3, r5
 2734 00d2 01DD     		ble	.L174
 528:Core/Src/graphics.c **** 					*miny = y1;
 2735              		.loc 1 528 6 is_stmt 1 view .LVU741
 2736              		.loc 1 528 12 is_stmt 0 view .LVU742
 2737 00d4 089B     		ldr	r3, [sp, #32]
 2738 00d6 1D80     		strh	r5, [r3]	@ movhi
 2739              	.L174:
 529:Core/Src/graphics.c **** 				if (x2 > *maxx)
 2740              		.loc 1 529 5 is_stmt 1 view .LVU743
 2741              		.loc 1 529 14 is_stmt 0 view .LVU744
 2742 00d8 099B     		ldr	r3, [sp, #36]
 2743 00da B3F90030 		ldrsh	r3, [r3]
 2744              		.loc 1 529 8 view .LVU745
 2745 00de 9342     		cmp	r3, r2
 2746 00e0 01DA     		bge	.L175
 530:Core/Src/graphics.c **** 					*maxx = x2;
 2747              		.loc 1 530 6 is_stmt 1 view .LVU746
 2748              		.loc 1 530 12 is_stmt 0 view .LVU747
 2749 00e2 099B     		ldr	r3, [sp, #36]
 2750 00e4 1A80     		strh	r2, [r3]	@ movhi
 2751              	.L175:
 531:Core/Src/graphics.c **** 				if (y2 > *maxy)
 2752              		.loc 1 531 5 is_stmt 1 view .LVU748
 2753              		.loc 1 531 14 is_stmt 0 view .LVU749
 2754 00e6 0A9B     		ldr	r3, [sp, #40]
 2755 00e8 B3F90030 		ldrsh	r3, [r3]
 2756              		.loc 1 531 8 view .LVU750
 2757 00ec 8342     		cmp	r3, r0
 2758 00ee 01DA     		bge	.L176
 532:Core/Src/graphics.c **** 					*maxy = y2;
 2759              		.loc 1 532 6 is_stmt 1 view .LVU751
 2760              		.loc 1 532 12 is_stmt 0 view .LVU752
 2761 00f0 0A9B     		ldr	r3, [sp, #40]
 2762 00f2 1880     		strh	r0, [r3]	@ movhi
 2763              	.L176:
 533:Core/Src/graphics.c **** 				*x += xa * ts;
 2764              		.loc 1 533 5 is_stmt 1 view .LVU753
 2765 00f4 0B88     		ldrh	r3, [r1]
 2766              		.loc 1 533 8 is_stmt 0 view .LVU754
 2767 00f6 1EFB04FE 		smulbb	lr, lr, r4
 2768              	.LVL229:
 2769              		.loc 1 533 8 view .LVU755
 2770 00fa 7344     		add	r3, r3, lr
 2771 00fc 0B80     		strh	r3, [r1]	@ movhi
 2772 00fe 0AE0     		b	.L168
 2773              	.LVL230:
 2774              	.L184:
 2775              		.loc 1 533 8 view .LVU756
 2776              	.LBE14:
 2777              	.LBE13:
ARM GAS  /tmp/cczeTd9s.s 			page 63


 508:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * (uint8_t) gfx_prop.font->yAdvance;
 2778              		.loc 1 508 4 is_stmt 1 view .LVU757
 508:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * (uint8_t) gfx_prop.font->yAdvance;
 2779              		.loc 1 508 7 is_stmt 0 view .LVU758
 2780 0100 0023     		movs	r3, #0
 2781              	.LVL231:
 508:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * (uint8_t) gfx_prop.font->yAdvance;
 2782              		.loc 1 508 7 view .LVU759
 2783 0102 0B80     		strh	r3, [r1]	@ movhi
 509:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2784              		.loc 1 509 4 is_stmt 1 view .LVU760
 2785 0104 1188     		ldrh	r1, [r2]
 2786              	.LVL232:
 509:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2787              		.loc 1 509 18 is_stmt 0 view .LVU761
 2788 0106 2F4B     		ldr	r3, .L186
 2789 0108 9B89     		ldrh	r3, [r3, #12]
 509:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2790              		.loc 1 509 53 view .LVU762
 2791 010a A07A     		ldrb	r0, [r4, #10]	@ zero_extendqisi2
 2792              	.LVL233:
 509:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2793              		.loc 1 509 28 view .LVU763
 2794 010c 13FB00F3 		smulbb	r3, r3, r0
 509:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Not a carriage return; is normal char
 2795              		.loc 1 509 7 view .LVU764
 2796 0110 11FA83F3 		uxtah	r3, r1, r3
 2797 0114 1380     		strh	r3, [r2]	@ movhi
 2798              	.LVL234:
 2799              	.L168:
 534:Core/Src/graphics.c **** 			}
 535:Core/Src/graphics.c **** 		}
 536:Core/Src/graphics.c **** 
 537:Core/Src/graphics.c **** 	} else {		// Default font
 538:Core/Src/graphics.c **** 
 539:Core/Src/graphics.c **** 		if (c == '\n') {	// Newline?
 540:Core/Src/graphics.c **** 			*x = 0;	// Reset x to zero,
 541:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * 8;	// advance y one line
 542:Core/Src/graphics.c **** 			// min/max x/y unchaged -- that waits for next 'normal' character
 543:Core/Src/graphics.c **** 		} else if (c != '\r') {	// Normal char; ignore carriage returns
 544:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((*x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off right?
 545:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 546:Core/Src/graphics.c **** 				*y += gfx_prop.textsize * 8;	// advance y one line
 547:Core/Src/graphics.c **** 			}
 548:Core/Src/graphics.c **** 			int x2 = *x + gfx_prop.textsize * 6 - 1,	// Lower-right pixel of char
 549:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 550:Core/Src/graphics.c **** 			if (x2 > *maxx)
 551:Core/Src/graphics.c **** 				*maxx = x2;	// Track max x, y
 552:Core/Src/graphics.c **** 			if (y2 > *maxy)
 553:Core/Src/graphics.c **** 				*maxy = y2;
 554:Core/Src/graphics.c **** 			if (*x < *minx)
 555:Core/Src/graphics.c **** 				*minx = *x;	// Track min x, y
 556:Core/Src/graphics.c **** 			if (*y < *miny)
 557:Core/Src/graphics.c **** 				*miny = *y;
 558:Core/Src/graphics.c **** 			*x += gfx_prop.textsize * 6;	// Advance x one char
 559:Core/Src/graphics.c **** 		}
 560:Core/Src/graphics.c **** 	}
ARM GAS  /tmp/cczeTd9s.s 			page 64


 561:Core/Src/graphics.c **** }
 2800              		.loc 1 561 1 view .LVU765
 2801 0116 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2802              	.LVL235:
 2803              	.L169:
 539:Core/Src/graphics.c **** 			*x = 0;	// Reset x to zero,
 2804              		.loc 1 539 3 is_stmt 1 view .LVU766
 539:Core/Src/graphics.c **** 			*x = 0;	// Reset x to zero,
 2805              		.loc 1 539 6 is_stmt 0 view .LVU767
 2806 011a 0A28     		cmp	r0, #10
 2807 011c 48D0     		beq	.L185
 543:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((*x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off right?
 2808              		.loc 1 543 10 is_stmt 1 view .LVU768
 543:Core/Src/graphics.c **** 			if (gfx_prop.wrap && ((*x + gfx_prop.textsize * 6) > gfx_prop.width)) {	// Off right?
 2809              		.loc 1 543 13 is_stmt 0 view .LVU769
 2810 011e 0D28     		cmp	r0, #13
 2811 0120 F9D0     		beq	.L168
 2812              	.LBB15:
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2813              		.loc 1 544 4 is_stmt 1 view .LVU770
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2814              		.loc 1 544 16 is_stmt 0 view .LVU771
 2815 0122 2848     		ldr	r0, .L186
 2816              	.LVL236:
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2817              		.loc 1 544 16 view .LVU772
 2818 0124 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2819              		.loc 1 544 7 view .LVU773
 2820 0126 80B1     		cbz	r0, .L178
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2821              		.loc 1 544 27 discriminator 1 view .LVU774
 2822 0128 B1F90000 		ldrsh	r0, [r1]
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2823              		.loc 1 544 40 discriminator 1 view .LVU775
 2824 012c 254D     		ldr	r5, .L186
 2825 012e AC89     		ldrh	r4, [r5, #12]
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2826              		.loc 1 544 50 discriminator 1 view .LVU776
 2827 0130 04EB4406 		add	r6, r4, r4, lsl #1
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2828              		.loc 1 544 30 discriminator 1 view .LVU777
 2829 0134 00EB4600 		add	r0, r0, r6, lsl #1
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2830              		.loc 1 544 65 discriminator 1 view .LVU778
 2831 0138 2D88     		ldrh	r5, [r5]
 544:Core/Src/graphics.c **** 				*x = 0;	// Reset x to zero,
 2832              		.loc 1 544 22 discriminator 1 view .LVU779
 2833 013a A842     		cmp	r0, r5
 2834 013c 05DD     		ble	.L178
 545:Core/Src/graphics.c **** 				*y += gfx_prop.textsize * 8;	// advance y one line
 2835              		.loc 1 545 5 is_stmt 1 view .LVU780
 545:Core/Src/graphics.c **** 				*y += gfx_prop.textsize * 8;	// advance y one line
 2836              		.loc 1 545 8 is_stmt 0 view .LVU781
 2837 013e 0020     		movs	r0, #0
 2838 0140 0880     		strh	r0, [r1]	@ movhi
 546:Core/Src/graphics.c **** 			}
ARM GAS  /tmp/cczeTd9s.s 			page 65


 2839              		.loc 1 546 5 is_stmt 1 view .LVU782
 2840 0142 1088     		ldrh	r0, [r2]
 546:Core/Src/graphics.c **** 			}
 2841              		.loc 1 546 8 is_stmt 0 view .LVU783
 2842 0144 00EBC400 		add	r0, r0, r4, lsl #3
 2843 0148 1080     		strh	r0, [r2]	@ movhi
 2844              	.L178:
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2845              		.loc 1 548 4 is_stmt 1 view .LVU784
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2846              		.loc 1 548 13 is_stmt 0 view .LVU785
 2847 014a B1F90050 		ldrsh	r5, [r1]
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2848              		.loc 1 548 26 view .LVU786
 2849 014e 1D48     		ldr	r0, .L186
 2850 0150 8089     		ldrh	r0, [r0, #12]
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2851              		.loc 1 548 36 view .LVU787
 2852 0152 00EB4004 		add	r4, r0, r0, lsl #1
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2853              		.loc 1 548 16 view .LVU788
 2854 0156 05EB4405 		add	r5, r5, r4, lsl #1
 548:Core/Src/graphics.c **** 			    y2 = *y + gfx_prop.textsize * 8 - 1;
 2855              		.loc 1 548 8 view .LVU789
 2856 015a 013D     		subs	r5, r5, #1
 2857              	.LVL237:
 549:Core/Src/graphics.c **** 			if (x2 > *maxx)
 2858              		.loc 1 549 13 view .LVU790
 2859 015c B2F90040 		ldrsh	r4, [r2]
 549:Core/Src/graphics.c **** 			if (x2 > *maxx)
 2860              		.loc 1 549 16 view .LVU791
 2861 0160 04EBC004 		add	r4, r4, r0, lsl #3
 549:Core/Src/graphics.c **** 			if (x2 > *maxx)
 2862              		.loc 1 549 8 view .LVU792
 2863 0164 013C     		subs	r4, r4, #1
 2864              	.LVL238:
 550:Core/Src/graphics.c **** 				*maxx = x2;	// Track max x, y
 2865              		.loc 1 550 4 is_stmt 1 view .LVU793
 550:Core/Src/graphics.c **** 				*maxx = x2;	// Track max x, y
 2866              		.loc 1 550 13 is_stmt 0 view .LVU794
 2867 0166 099E     		ldr	r6, [sp, #36]
 2868 0168 B6F90060 		ldrsh	r6, [r6]
 550:Core/Src/graphics.c **** 				*maxx = x2;	// Track max x, y
 2869              		.loc 1 550 7 view .LVU795
 2870 016c AE42     		cmp	r6, r5
 2871 016e 01DA     		bge	.L179
 551:Core/Src/graphics.c **** 			if (y2 > *maxy)
 2872              		.loc 1 551 5 is_stmt 1 view .LVU796
 551:Core/Src/graphics.c **** 			if (y2 > *maxy)
 2873              		.loc 1 551 11 is_stmt 0 view .LVU797
 2874 0170 099E     		ldr	r6, [sp, #36]
 2875 0172 3580     		strh	r5, [r6]	@ movhi
 2876              	.L179:
 552:Core/Src/graphics.c **** 				*maxy = y2;
 2877              		.loc 1 552 4 is_stmt 1 view .LVU798
 552:Core/Src/graphics.c **** 				*maxy = y2;
 2878              		.loc 1 552 13 is_stmt 0 view .LVU799
ARM GAS  /tmp/cczeTd9s.s 			page 66


 2879 0174 0A9D     		ldr	r5, [sp, #40]
 2880              	.LVL239:
 552:Core/Src/graphics.c **** 				*maxy = y2;
 2881              		.loc 1 552 13 view .LVU800
 2882 0176 B5F90050 		ldrsh	r5, [r5]
 552:Core/Src/graphics.c **** 				*maxy = y2;
 2883              		.loc 1 552 7 view .LVU801
 2884 017a A542     		cmp	r5, r4
 2885 017c 01DA     		bge	.L180
 553:Core/Src/graphics.c **** 			if (*x < *minx)
 2886              		.loc 1 553 5 is_stmt 1 view .LVU802
 553:Core/Src/graphics.c **** 			if (*x < *minx)
 2887              		.loc 1 553 11 is_stmt 0 view .LVU803
 2888 017e 0A9D     		ldr	r5, [sp, #40]
 2889 0180 2C80     		strh	r4, [r5]	@ movhi
 2890              	.L180:
 554:Core/Src/graphics.c **** 				*minx = *x;	// Track min x, y
 2891              		.loc 1 554 4 is_stmt 1 view .LVU804
 554:Core/Src/graphics.c **** 				*minx = *x;	// Track min x, y
 2892              		.loc 1 554 8 is_stmt 0 view .LVU805
 2893 0182 B1F90040 		ldrsh	r4, [r1]
 2894              	.LVL240:
 554:Core/Src/graphics.c **** 				*minx = *x;	// Track min x, y
 2895              		.loc 1 554 13 view .LVU806
 2896 0186 B3F90050 		ldrsh	r5, [r3]
 554:Core/Src/graphics.c **** 				*minx = *x;	// Track min x, y
 2897              		.loc 1 554 7 view .LVU807
 2898 018a AC42     		cmp	r4, r5
 2899 018c 00DA     		bge	.L181
 555:Core/Src/graphics.c **** 			if (*y < *miny)
 2900              		.loc 1 555 5 is_stmt 1 view .LVU808
 555:Core/Src/graphics.c **** 			if (*y < *miny)
 2901              		.loc 1 555 11 is_stmt 0 view .LVU809
 2902 018e 1C80     		strh	r4, [r3]	@ movhi
 2903              	.L181:
 556:Core/Src/graphics.c **** 				*miny = *y;
 2904              		.loc 1 556 4 is_stmt 1 view .LVU810
 556:Core/Src/graphics.c **** 				*miny = *y;
 2905              		.loc 1 556 8 is_stmt 0 view .LVU811
 2906 0190 B2F90030 		ldrsh	r3, [r2]
 2907              	.LVL241:
 556:Core/Src/graphics.c **** 				*miny = *y;
 2908              		.loc 1 556 13 view .LVU812
 2909 0194 089A     		ldr	r2, [sp, #32]
 2910              	.LVL242:
 556:Core/Src/graphics.c **** 				*miny = *y;
 2911              		.loc 1 556 13 view .LVU813
 2912 0196 B2F90020 		ldrsh	r2, [r2]
 556:Core/Src/graphics.c **** 				*miny = *y;
 2913              		.loc 1 556 7 view .LVU814
 2914 019a 9342     		cmp	r3, r2
 2915 019c 01DA     		bge	.L182
 557:Core/Src/graphics.c **** 			*x += gfx_prop.textsize * 6;	// Advance x one char
 2916              		.loc 1 557 5 is_stmt 1 view .LVU815
 557:Core/Src/graphics.c **** 			*x += gfx_prop.textsize * 6;	// Advance x one char
 2917              		.loc 1 557 11 is_stmt 0 view .LVU816
 2918 019e 089A     		ldr	r2, [sp, #32]
ARM GAS  /tmp/cczeTd9s.s 			page 67


 2919 01a0 1380     		strh	r3, [r2]	@ movhi
 2920              	.L182:
 558:Core/Src/graphics.c **** 		}
 2921              		.loc 1 558 4 is_stmt 1 view .LVU817
 2922 01a2 0B88     		ldrh	r3, [r1]
 558:Core/Src/graphics.c **** 		}
 2923              		.loc 1 558 7 is_stmt 0 view .LVU818
 2924 01a4 00EB4000 		add	r0, r0, r0, lsl #1
 558:Core/Src/graphics.c **** 		}
 2925              		.loc 1 558 7 view .LVU819
 2926 01a8 03EB4003 		add	r3, r3, r0, lsl #1
 2927 01ac 0B80     		strh	r3, [r1]	@ movhi
 2928              	.LBE15:
 2929              		.loc 1 561 1 view .LVU820
 2930 01ae B2E7     		b	.L168
 2931              	.LVL243:
 2932              	.L185:
 540:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * 8;	// advance y one line
 2933              		.loc 1 540 4 is_stmt 1 view .LVU821
 540:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * 8;	// advance y one line
 2934              		.loc 1 540 7 is_stmt 0 view .LVU822
 2935 01b0 0023     		movs	r3, #0
 2936              	.LVL244:
 540:Core/Src/graphics.c **** 			*y += gfx_prop.textsize * 8;	// advance y one line
 2937              		.loc 1 540 7 view .LVU823
 2938 01b2 0B80     		strh	r3, [r1]	@ movhi
 541:Core/Src/graphics.c **** 			// min/max x/y unchaged -- that waits for next 'normal' character
 2939              		.loc 1 541 4 is_stmt 1 view .LVU824
 2940 01b4 1388     		ldrh	r3, [r2]
 541:Core/Src/graphics.c **** 			// min/max x/y unchaged -- that waits for next 'normal' character
 2941              		.loc 1 541 18 is_stmt 0 view .LVU825
 2942 01b6 0349     		ldr	r1, .L186
 2943              	.LVL245:
 541:Core/Src/graphics.c **** 			// min/max x/y unchaged -- that waits for next 'normal' character
 2944              		.loc 1 541 18 view .LVU826
 2945 01b8 8989     		ldrh	r1, [r1, #12]
 541:Core/Src/graphics.c **** 			// min/max x/y unchaged -- that waits for next 'normal' character
 2946              		.loc 1 541 7 view .LVU827
 2947 01ba 03EBC103 		add	r3, r3, r1, lsl #3
 2948 01be 1380     		strh	r3, [r2]	@ movhi
 2949 01c0 A9E7     		b	.L168
 2950              	.L187:
 2951 01c2 00BF     		.align	2
 2952              	.L186:
 2953 01c4 00000000 		.word	gfx_prop
 2954              		.cfi_endproc
 2955              	.LFE172:
 2957              		.section	.text.graphics_getTextBounds,"ax",%progbits
 2958              		.align	1
 2959              		.global	graphics_getTextBounds
 2960              		.syntax unified
 2961              		.thumb
 2962              		.thumb_func
 2964              	graphics_getTextBounds:
 2965              	.LVL246:
 2966              	.LFB173:
 562:Core/Src/graphics.c **** 
ARM GAS  /tmp/cczeTd9s.s 			page 68


 563:Core/Src/graphics.c **** // Pass string and a cursor position, returns UL corner and W,H.
 564:Core/Src/graphics.c **** void graphics_getTextBounds(char *str, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w,
 565:Core/Src/graphics.c **** {
 2967              		.loc 1 565 1 is_stmt 1 view -0
 2968              		.cfi_startproc
 2969              		@ args = 12, pretend = 0, frame = 16
 2970              		@ frame_needed = 0, uses_anonymous_args = 0
 2971              		.loc 1 565 1 is_stmt 0 view .LVU829
 2972 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2973              	.LCFI30:
 2974              		.cfi_def_cfa_offset 24
 2975              		.cfi_offset 4, -24
 2976              		.cfi_offset 5, -20
 2977              		.cfi_offset 6, -16
 2978              		.cfi_offset 7, -12
 2979              		.cfi_offset 8, -8
 2980              		.cfi_offset 14, -4
 2981 0004 88B0     		sub	sp, sp, #32
 2982              	.LCFI31:
 2983              		.cfi_def_cfa_offset 56
 2984 0006 0446     		mov	r4, r0
 2985 0008 1D46     		mov	r5, r3
 2986 000a 0E9F     		ldr	r7, [sp, #56]
 2987 000c DDF83C80 		ldr	r8, [sp, #60]
 2988 0010 109E     		ldr	r6, [sp, #64]
 2989 0012 ADF81610 		strh	r1, [sp, #22]	@ movhi
 2990 0016 ADF81420 		strh	r2, [sp, #20]	@ movhi
 566:Core/Src/graphics.c **** 	uint8_t c;		// Current character
 2991              		.loc 1 566 2 is_stmt 1 view .LVU830
 567:Core/Src/graphics.c **** 
 568:Core/Src/graphics.c **** 	*x1 = x;
 2992              		.loc 1 568 2 view .LVU831
 2993              		.loc 1 568 6 is_stmt 0 view .LVU832
 2994 001a 0BB2     		sxth	r3, r1
 2995              	.LVL247:
 2996              		.loc 1 568 6 view .LVU833
 2997 001c 2B80     		strh	r3, [r5]	@ movhi
 569:Core/Src/graphics.c **** 	*y1 = y;
 2998              		.loc 1 569 2 is_stmt 1 view .LVU834
 2999              		.loc 1 569 6 is_stmt 0 view .LVU835
 3000 001e 13B2     		sxth	r3, r2
 3001 0020 3B80     		strh	r3, [r7]	@ movhi
 570:Core/Src/graphics.c **** 	*w = *h = 0;
 3002              		.loc 1 570 2 is_stmt 1 view .LVU836
 3003              		.loc 1 570 10 is_stmt 0 view .LVU837
 3004 0022 0023     		movs	r3, #0
 3005 0024 3380     		strh	r3, [r6]	@ movhi
 3006              		.loc 1 570 5 view .LVU838
 3007 0026 A8F80030 		strh	r3, [r8]	@ movhi
 571:Core/Src/graphics.c **** 
 572:Core/Src/graphics.c **** 	int16_t minx = gfx_prop.width, miny = gfx_prop.height, maxx = -1, maxy = -1;
 3008              		.loc 1 572 2 is_stmt 1 view .LVU839
 3009              		.loc 1 572 25 is_stmt 0 view .LVU840
 3010 002a 204B     		ldr	r3, .L194
 3011 002c B3F90020 		ldrsh	r2, [r3]
 3012              	.LVL248:
 3013              		.loc 1 572 10 view .LVU841
ARM GAS  /tmp/cczeTd9s.s 			page 69


 3014 0030 ADF81E20 		strh	r2, [sp, #30]	@ movhi
 3015              		.loc 1 572 48 view .LVU842
 3016 0034 B3F90230 		ldrsh	r3, [r3, #2]
 3017              		.loc 1 572 33 view .LVU843
 3018 0038 ADF81C30 		strh	r3, [sp, #28]	@ movhi
 3019              		.loc 1 572 57 view .LVU844
 3020 003c 4FF6FF73 		movw	r3, #65535
 3021 0040 ADF81A30 		strh	r3, [sp, #26]	@ movhi
 3022              		.loc 1 572 68 view .LVU845
 3023 0044 ADF81830 		strh	r3, [sp, #24]	@ movhi
 573:Core/Src/graphics.c **** 
 574:Core/Src/graphics.c **** 	while ((c = *str++))
 3024              		.loc 1 574 2 is_stmt 1 view .LVU846
 3025              		.loc 1 574 8 is_stmt 0 view .LVU847
 3026 0048 0DE0     		b	.L189
 3027              	.LVL249:
 3028              	.L190:
 575:Core/Src/graphics.c **** 		graphics_charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 3029              		.loc 1 575 3 is_stmt 1 view .LVU848
 3030 004a 06AB     		add	r3, sp, #24
 3031 004c 0293     		str	r3, [sp, #8]
 3032 004e 0DF11A03 		add	r3, sp, #26
 3033 0052 0193     		str	r3, [sp, #4]
 3034 0054 07AA     		add	r2, sp, #28
 3035 0056 0092     		str	r2, [sp]
 3036 0058 0DF11E03 		add	r3, sp, #30
 3037 005c 05AA     		add	r2, sp, #20
 3038 005e 0DF11601 		add	r1, sp, #22
 3039 0062 FFF7FEFF 		bl	graphics_charBounds
 3040              	.LVL250:
 3041              	.L189:
 574:Core/Src/graphics.c **** 		graphics_charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 3042              		.loc 1 574 9 view .LVU849
 574:Core/Src/graphics.c **** 		graphics_charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 3043              		.loc 1 574 12 is_stmt 0 view .LVU850
 3044 0066 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 3045              	.LVL251:
 574:Core/Src/graphics.c **** 		graphics_charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 3046              		.loc 1 574 9 view .LVU851
 3047 006a 0028     		cmp	r0, #0
 3048 006c EDD1     		bne	.L190
 576:Core/Src/graphics.c **** 
 577:Core/Src/graphics.c **** 	if (maxx >= minx) {
 3049              		.loc 1 577 2 is_stmt 1 view .LVU852
 3050              		.loc 1 577 11 is_stmt 0 view .LVU853
 3051 006e BDF91A30 		ldrsh	r3, [sp, #26]
 3052 0072 BDF91E20 		ldrsh	r2, [sp, #30]
 3053              		.loc 1 577 5 view .LVU854
 3054 0076 9342     		cmp	r3, r2
 3055 0078 07DB     		blt	.L191
 578:Core/Src/graphics.c **** 		*x1 = minx;
 3056              		.loc 1 578 3 is_stmt 1 view .LVU855
 3057              		.loc 1 578 7 is_stmt 0 view .LVU856
 3058 007a 2A80     		strh	r2, [r5]	@ movhi
 579:Core/Src/graphics.c **** 		*w = maxx - minx + 1;
 3059              		.loc 1 579 3 is_stmt 1 view .LVU857
 3060              		.loc 1 579 13 is_stmt 0 view .LVU858
ARM GAS  /tmp/cczeTd9s.s 			page 70


 3061 007c BDF81A30 		ldrh	r3, [sp, #26]
 3062 0080 9B1A     		subs	r3, r3, r2
 3063 0082 9BB2     		uxth	r3, r3
 3064              		.loc 1 579 20 view .LVU859
 3065 0084 0133     		adds	r3, r3, #1
 3066              		.loc 1 579 6 view .LVU860
 3067 0086 A8F80030 		strh	r3, [r8]	@ movhi
 3068              	.L191:
 580:Core/Src/graphics.c **** 	}
 581:Core/Src/graphics.c **** 	if (maxy >= miny) {
 3069              		.loc 1 581 2 is_stmt 1 view .LVU861
 3070              		.loc 1 581 11 is_stmt 0 view .LVU862
 3071 008a BDF91830 		ldrsh	r3, [sp, #24]
 3072 008e BDF91C20 		ldrsh	r2, [sp, #28]
 3073              		.loc 1 581 5 view .LVU863
 3074 0092 9342     		cmp	r3, r2
 3075 0094 06DB     		blt	.L188
 582:Core/Src/graphics.c **** 		*y1 = miny;
 3076              		.loc 1 582 3 is_stmt 1 view .LVU864
 3077              		.loc 1 582 7 is_stmt 0 view .LVU865
 3078 0096 3A80     		strh	r2, [r7]	@ movhi
 583:Core/Src/graphics.c **** 		*h = maxy - miny + 1;
 3079              		.loc 1 583 3 is_stmt 1 view .LVU866
 3080              		.loc 1 583 13 is_stmt 0 view .LVU867
 3081 0098 BDF81830 		ldrh	r3, [sp, #24]
 3082 009c 9B1A     		subs	r3, r3, r2
 3083 009e 9BB2     		uxth	r3, r3
 3084              		.loc 1 583 20 view .LVU868
 3085 00a0 0133     		adds	r3, r3, #1
 3086              		.loc 1 583 6 view .LVU869
 3087 00a2 3380     		strh	r3, [r6]	@ movhi
 3088              	.L188:
 584:Core/Src/graphics.c **** 	}
 585:Core/Src/graphics.c **** }
 3089              		.loc 1 585 1 view .LVU870
 3090 00a4 08B0     		add	sp, sp, #32
 3091              	.LCFI32:
 3092              		.cfi_def_cfa_offset 24
 3093              		@ sp needed
 3094 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3095              	.LVL252:
 3096              	.L195:
 3097              		.loc 1 585 1 view .LVU871
 3098 00aa 00BF     		.align	2
 3099              	.L194:
 3100 00ac 00000000 		.word	gfx_prop
 3101              		.cfi_endproc
 3102              	.LFE173:
 3104              		.section	.data.gfx_prop,"aw"
 3105              		.align	2
 3108              	gfx_prop:
 3109 0000 0000     		.short	0
 3110 0002 0000     		.short	0
 3111 0004 0000     		.short	0
 3112 0006 0000     		.short	0
 3113 0008 0000     		.short	0
 3114 000a 0000     		.short	0
ARM GAS  /tmp/cczeTd9s.s 			page 71


 3115 000c 0100     		.short	1
 3116 000e 0000     		.short	0
 3117 0010 00       		.byte	0
 3118 0011 000000   		.space	3
 3119 0014 00000000 		.word	0
 3120 0018 00       		.byte	0
 3121 0019 000000   		.space	3
 3122              		.text
 3123              	.Letext0:
 3124              		.file 2 "/home/jack/ece331/Downloads/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-eabi/lib/gcc/arm
 3125              		.file 3 "/home/jack/ece331/Downloads/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-eabi/arm-none-ea
 3126              		.file 4 "/home/jack/ece331/Downloads/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-eabi/arm-none-ea
 3127              		.file 5 "Core/Inc/gfxfont.h"
 3128              		.file 6 "Core/Inc/graphics.h"
 3129              		.file 7 "Core/Inc/Adafruit_ST7735.h"
 3130              		.file 8 "/home/jack/ece331/Downloads/arm-gnu-toolchain-12.2.rel1-aarch64-arm-none-eabi/arm-none-ea
ARM GAS  /tmp/cczeTd9s.s 			page 72


DEFINED SYMBOLS
                            *ABS*:0000000000000000 graphics.c
     /tmp/cczeTd9s.s:20     .text.graphics_init:0000000000000000 $t
     /tmp/cczeTd9s.s:26     .text.graphics_init:0000000000000000 graphics_init
     /tmp/cczeTd9s.s:46     .text.graphics_init:0000000000000008 $d
     /tmp/cczeTd9s.s:3108   .data.gfx_prop:0000000000000000 gfx_prop
     /tmp/cczeTd9s.s:51     .text.graphics_writeLine:0000000000000000 $t
     /tmp/cczeTd9s.s:57     .text.graphics_writeLine:0000000000000000 graphics_writeLine
     /tmp/cczeTd9s.s:256    .text.graphics_drawLine:0000000000000000 $t
     /tmp/cczeTd9s.s:262    .text.graphics_drawLine:0000000000000000 graphics_drawLine
     /tmp/cczeTd9s.s:363    .text.graphics_drawCircle:0000000000000000 $t
     /tmp/cczeTd9s.s:369    .text.graphics_drawCircle:0000000000000000 graphics_drawCircle
     /tmp/cczeTd9s.s:611    .text.grahics_drawCircleHelper:0000000000000000 $t
     /tmp/cczeTd9s.s:617    .text.grahics_drawCircleHelper:0000000000000000 grahics_drawCircleHelper
     /tmp/cczeTd9s.s:865    .text.graphics_fillCircleHelper:0000000000000000 $t
     /tmp/cczeTd9s.s:871    .text.graphics_fillCircleHelper:0000000000000000 graphics_fillCircleHelper
     /tmp/cczeTd9s.s:1092   .text.grahics_fillCircle:0000000000000000 $t
     /tmp/cczeTd9s.s:1098   .text.grahics_fillCircle:0000000000000000 grahics_fillCircle
     /tmp/cczeTd9s.s:1158   .text.graphics_drawRect:0000000000000000 $t
     /tmp/cczeTd9s.s:1164   .text.graphics_drawRect:0000000000000000 graphics_drawRect
     /tmp/cczeTd9s.s:1232   .text.graphics_fillRect:0000000000000000 $t
     /tmp/cczeTd9s.s:1238   .text.graphics_fillRect:0000000000000000 graphics_fillRect
     /tmp/cczeTd9s.s:1300   .text.graphics_width:0000000000000000 $t
     /tmp/cczeTd9s.s:1306   .text.graphics_width:0000000000000000 graphics_width
     /tmp/cczeTd9s.s:1321   .text.graphics_width:0000000000000008 $d
     /tmp/cczeTd9s.s:1326   .text.graphics_height:0000000000000000 $t
     /tmp/cczeTd9s.s:1332   .text.graphics_height:0000000000000000 graphics_height
     /tmp/cczeTd9s.s:1347   .text.graphics_height:0000000000000008 $d
     /tmp/cczeTd9s.s:1352   .text.graphics_drawChar:0000000000000000 $t
     /tmp/cczeTd9s.s:1358   .text.graphics_drawChar:0000000000000000 graphics_drawChar
     /tmp/cczeTd9s.s:1815   .text.graphics_drawChar:000000000000020c $d
     /tmp/cczeTd9s.s:1822   .text.graphics_write:0000000000000000 $t
     /tmp/cczeTd9s.s:1828   .text.graphics_write:0000000000000000 graphics_write
     /tmp/cczeTd9s.s:2086   .text.graphics_write:0000000000000114 $d
     /tmp/cczeTd9s.s:2091   .text.graphics_setCursor:0000000000000000 $t
     /tmp/cczeTd9s.s:2097   .text.graphics_setCursor:0000000000000000 graphics_setCursor
     /tmp/cczeTd9s.s:2117   .text.graphics_setCursor:0000000000000008 $d
     /tmp/cczeTd9s.s:2122   .text.graphics_drawText:0000000000000000 $t
     /tmp/cczeTd9s.s:2128   .text.graphics_drawText:0000000000000000 graphics_drawText
     /tmp/cczeTd9s.s:2186   .text.graphics_getCursorX:0000000000000000 $t
     /tmp/cczeTd9s.s:2192   .text.graphics_getCursorX:0000000000000000 graphics_getCursorX
     /tmp/cczeTd9s.s:2207   .text.graphics_getCursorX:0000000000000008 $d
     /tmp/cczeTd9s.s:2212   .text.graphics_getCursorY:0000000000000000 $t
     /tmp/cczeTd9s.s:2218   .text.graphics_getCursorY:0000000000000000 graphics_getCursorY
     /tmp/cczeTd9s.s:2233   .text.graphics_getCursorY:0000000000000008 $d
     /tmp/cczeTd9s.s:2238   .text.graphics_setTextSize:0000000000000000 $t
     /tmp/cczeTd9s.s:2244   .text.graphics_setTextSize:0000000000000000 graphics_setTextSize
     /tmp/cczeTd9s.s:2266   .text.graphics_setTextSize:000000000000000c $d
     /tmp/cczeTd9s.s:2271   .text.graphics_setTextColor:0000000000000000 $t
     /tmp/cczeTd9s.s:2277   .text.graphics_setTextColor:0000000000000000 graphics_setTextColor
     /tmp/cczeTd9s.s:2296   .text.graphics_setTextColor:0000000000000008 $d
     /tmp/cczeTd9s.s:2301   .text.graphics_setTextColor2:0000000000000000 $t
     /tmp/cczeTd9s.s:2307   .text.graphics_setTextColor2:0000000000000000 graphics_setTextColor2
     /tmp/cczeTd9s.s:2327   .text.graphics_setTextColor2:0000000000000008 $d
     /tmp/cczeTd9s.s:2332   .text.graphics_setTextWrap:0000000000000000 $t
     /tmp/cczeTd9s.s:2338   .text.graphics_setTextWrap:0000000000000000 graphics_setTextWrap
     /tmp/cczeTd9s.s:2355   .text.graphics_setTextWrap:0000000000000008 $d
ARM GAS  /tmp/cczeTd9s.s 			page 73


     /tmp/cczeTd9s.s:2360   .text.graphics_getRotation:0000000000000000 $t
     /tmp/cczeTd9s.s:2366   .text.graphics_getRotation:0000000000000000 graphics_getRotation
     /tmp/cczeTd9s.s:2381   .text.graphics_getRotation:0000000000000008 $d
     /tmp/cczeTd9s.s:2386   .text.graphics_setRotation:0000000000000000 $t
     /tmp/cczeTd9s.s:2392   .text.graphics_setRotation:0000000000000000 graphics_setRotation
     /tmp/cczeTd9s.s:2412   .text.graphics_setRotation:0000000000000010 $d
     /tmp/cczeTd9s.s:2416   .text.graphics_setRotation:0000000000000014 $t
     /tmp/cczeTd9s.s:2446   .text.graphics_setRotation:000000000000002c $d
     /tmp/cczeTd9s.s:2451   .text.graphics_cp437:0000000000000000 $t
     /tmp/cczeTd9s.s:2457   .text.graphics_cp437:0000000000000000 graphics_cp437
     /tmp/cczeTd9s.s:2474   .text.graphics_cp437:0000000000000008 $d
     /tmp/cczeTd9s.s:2479   .text.graphics_setFont:0000000000000000 $t
     /tmp/cczeTd9s.s:2485   .text.graphics_setFont:0000000000000000 graphics_setFont
     /tmp/cczeTd9s.s:2538   .text.graphics_setFont:000000000000002c $d
     /tmp/cczeTd9s.s:2543   .text.graphics_charBounds:0000000000000000 $t
     /tmp/cczeTd9s.s:2549   .text.graphics_charBounds:0000000000000000 graphics_charBounds
     /tmp/cczeTd9s.s:2953   .text.graphics_charBounds:00000000000001c4 $d
     /tmp/cczeTd9s.s:2958   .text.graphics_getTextBounds:0000000000000000 $t
     /tmp/cczeTd9s.s:2964   .text.graphics_getTextBounds:0000000000000000 graphics_getTextBounds
     /tmp/cczeTd9s.s:3100   .text.graphics_getTextBounds:00000000000000ac $d
     /tmp/cczeTd9s.s:3105   .data.gfx_prop:0000000000000000 $d

UNDEFINED SYMBOLS
Adafruit_ST7735_drawPixel
Adafruit_ST7735_drawFastHLine
Adafruit_ST7735_drawFastVLine
font
strlen
